<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言标准库——va_list</title>
      <link href="/2023/03/11/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E2%80%94%E2%80%94va-list/"/>
      <url>/2023/03/11/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E2%80%94%E2%80%94va-list/</url>
      
        <content type="html"><![CDATA[<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>va_list是在C语言中解决变参问题的一组宏，所在头文件：**#include&lt;stdarg.h&gt;**，用于获取不确定个数的参数。</p><h2 id="二、意义"><a href="#二、意义" class="headerlink" title="二、意义"></a>二、意义</h2><p>当你的函数的参数个数不确定时，就可以使用上述宏进行动态处理。</p><h2 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h2><ul><li>首先在函数中定义一个具有va_list型的变量，这个变量是指向参数的指针。</li><li>然后用va_start() 宏初始化变量刚定义的va_list变量，使其指向第一个可变参数的地址。</li><li>然后va_arg返回可变参数，va_arg的第二个参数是你要返回的参数的类型（如果多个可变参数，依次调用va_arg获取各个参数）。</li><li>最后使用va_end宏结束可变参数的获取。</li></ul><h2 id="四、注意点"><a href="#四、注意点" class="headerlink" title="四、注意点"></a>四、注意点</h2><p>在使用va_list时应该注意以下问题：</p><ul><li>可变参数的类型和个数完全由代码控制，它并不能智能地识别不同参数的个数和类型。</li><li>如果我们不需要一一详解每个参数，只需要将可变列表拷贝到某个缓冲区，可以用vsprintf函数。</li><li>因为编译器对可变参数的函数原型检查不够严格，对编程查错不利，不利于我们写出高质量的代码。</li></ul><h2 id="五、示例"><a href="#五、示例" class="headerlink" title="五、示例"></a>五、示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">char</span>* msg,...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">total = <span class="built_in">sum</span>(<span class="string">&quot;hello world&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;total = &quot;</span> &lt;&lt; total &lt;&lt;std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">char</span>* msg,...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">va_list vaList;<span class="comment">//定义一个具有va_list型的变量，这个变量是指向参数的指针。</span></span><br><span class="line"><span class="built_in">va_start</span>(vaList,msg);<span class="comment">//第一个参数指向可变列表的地址，地址自动增加，第二个参数为固定值</span></span><br><span class="line">std::cout &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line"><span class="type">int</span> sumNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> step;</span><br><span class="line"><span class="keyword">while</span>((step = <span class="built_in">va_arg</span>(vaList,<span class="type">int</span>)) &lt; <span class="number">4</span>)<span class="comment">//va_arg第一个参数是可变参数的地址，第二个参数是传入参数的类型，返回值就是va_list中接着的地址值，类型和va_arg的第二个参数一样。</span></span><br><span class="line">        <span class="comment">//不等于0表示，va_list中还有参数可取</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//va_arg取得下一个指针</span></span><br><span class="line">sumNum += step;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">va_end</span>(vaList);<span class="comment">//结束可变参数列表</span></span><br><span class="line"><span class="keyword">return</span> sumNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>hello world</p><p>total&#x3D;6</p>]]></content>
      
      
      <categories>
          
          <category> C语言标准库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> va_list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/11/hello-world/"/>
      <url>/2023/03/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266通信——AP模式（电脑作为客户端，8266作为服务器，无需路由器）</title>
      <link href="/2023/03/09/ESP8266%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94AP%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/09/ESP8266%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94AP%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ESP8266配置"><a href="#一、ESP8266配置" class="headerlink" title="一、ESP8266配置"></a>一、ESP8266配置</h2><p>在串口助手中，通过AT指令配置ESP8266的AP模式。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.AT测试AT是否OK</span><br><span class="line">2.AT+RST软重启模组</span><br><span class="line">3.AT+<span class="attribute">CWMODE</span>=2配置AP模式</span><br><span class="line">4.AT+<span class="attribute">CWSAP_DEF</span>=<span class="string">&quot;SSID&quot;</span>,&quot;password&quot;,5,4   设置ESP8266的AP信息</span><br><span class="line">AT+<span class="attribute">CWSAP_DEF</span>=&lt;ssid&gt;,&lt;pwd&gt;,&lt;chl&gt;,&lt;ecn&gt;[,&lt;max conn&gt;][,&lt;ssid hidden&gt;]</span><br><span class="line">5.AT+CIFSR查询本机IP</span><br><span class="line">6.AT+<span class="attribute">CIPMUX</span>=1开启多连接</span><br><span class="line">7.AT+<span class="attribute">CIPSERVER</span>=1,8080开启服务器，端口号8080</span><br><span class="line">8.AT+<span class="attribute">CIPSEND</span>=0,5AT+<span class="attribute">CIPSEND</span>=clientid,length</span><br><span class="line">9.AT+<span class="attribute">CIPSERVER</span>=0 关闭服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、配置电脑客户端"><a href="#二、配置电脑客户端" class="headerlink" title="二、配置电脑客户端"></a>二、配置电脑客户端</h2><p>在网络测试助手中，设置协议类型，TCP客户端，设置远程主机地址为ESP8266的IP地址，远程主机端口为ESP8266的端口，最后点击连接，等待连接成功。</p><h2 id="三、数据收发"><a href="#三、数据收发" class="headerlink" title="三、数据收发"></a>三、数据收发</h2><p>当建立连接后，双方即可正常收发数据。</p><p>电脑在网络测试助手发送即可。</p><p>ESP8266发送数据需要在串口助手中先发送AT指令：AT+CIPSEND&#x3D;clientid,length，等待串口助手显示&gt;后，再输入要具体发送的内容。</p>]]></content>
      
      
      <categories>
          
          <category> WIFI通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266通信——Station模式（8266客户端，电脑服务器，需要路由器中转）</title>
      <link href="/2023/03/09/ESP8266%E9%80%9A%E4%BF%A1%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Station%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/09/ESP8266%E9%80%9A%E4%BF%A1%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Station%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ESP8266配置"><a href="#一、ESP8266配置" class="headerlink" title="一、ESP8266配置"></a>一、ESP8266配置</h2><p>在串口助手中，通过AT指令配置ESP8266的station模式。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>AT测试AT是否OK</span><br><span class="line"><span class="number">2.</span>AT+RST软重启模组</span><br><span class="line"><span class="number">3.</span>AT+CWMODE=<span class="number">1</span>配置station模式</span><br><span class="line"><span class="number">4.</span>AT+CWLAP列出所有可连接热点</span><br><span class="line"><span class="number">5.</span>AT+CWJAP=<span class="string">&quot;SSID&quot;</span>,<span class="string">&quot;password&quot;</span>连接热点</span><br><span class="line"><span class="number">6.</span>AT+<span class="built_in">CIPMUX</span>=<span class="number">1</span>ESP8266 作为服务器做多支持 <span class="number">5</span> 个客户端的链接，<span class="type">id</span> 分配顺序是 <span class="number">0</span><span class="number">-4</span></span><br><span class="line"><span class="number">7.</span>AT+<span class="built_in">CIFSR</span>查看ESP8266的IP</span><br><span class="line"><span class="comment">//当电脑端服务器配置完成后，执行下面AT指令</span></span><br><span class="line"><span class="number">8.</span>AT+<span class="built_in">CIPSTART</span>=<span class="string">&quot;TCP&quot;</span>,<span class="string">&quot;IP地址&quot;</span>,端口号 ESP8266作为客户端，连接电脑服务器端</span><br><span class="line"><span class="number">9.</span>AT+<span class="built_in">CIPSEND</span>=<span class="number">0</span>,<span class="number">5</span>AT+<span class="built_in">CIPSEND</span>=clientid,length</span><br><span class="line"><span class="number">10.</span>AT+<span class="built_in">CIPCLOSE</span>关闭ESP8266与电脑的连接</span><br><span class="line"><span class="number">11.</span>AT+<span class="built_in">CIPQAP</span>关闭ESP8266与无线路由器的连接</span><br></pre></td></tr></table></figure><h2 id="二、配置电脑端服务器"><a href="#二、配置电脑端服务器" class="headerlink" title="二、配置电脑端服务器"></a>二、配置电脑端服务器</h2><p>在网络测试助手中，新建服务器，本地IP地址要确保与ESP8266的IP地址在同一网段，端口号设置8080，点击打开&#x2F;启动。</p><p>然后在ESP8266中，执行上面第8条的AT指令，等待连接成功。</p><p>如果失败，ESP8266多重启几次试试。</p><h2 id="三、数据收发"><a href="#三、数据收发" class="headerlink" title="三、数据收发"></a>三、数据收发</h2><p>当建立连接后，双方即可正常通信，收发数据。</p><p>电脑在网络测试助手发送即可。</p><p>ESP8266发送数据需要在串口助手中先发送AT指令：AT+CIPSEND&#x3D;clientid,length，等待串口助手显示&gt;后，再输入要具体发送的内容。</p>]]></content>
      
      
      <categories>
          
          <category> WIFI通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAL库开发（二）——ADC与DMA</title>
      <link href="/2023/03/02/HAL%E5%BA%93%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94ADC%E4%B8%8EDMA/"/>
      <url>/2023/03/02/HAL%E5%BA%93%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94ADC%E4%B8%8EDMA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、轮询法"><a href="#一、轮询法" class="headerlink" title="一、轮询法"></a>一、轮询法</h2><ol><li><p>开启RCC时钟</p></li><li><p>CubeMX进行ADC配置：</p><ul><li>通道</li><li>采用模式：一般选择连续采样模式</li><li>……如下图</li></ul><p><img src="/../images/ADC1.png" alt="ADC_CubeMX配置"></p></li><li><p>编写程序：驱动基本都自动生成好了，主要编写主函数。</p></li></ol><p>​在主函数中添加如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">HAL_ADC_PollForConversion(&amp;hadc1, <span class="number">10</span>);<span class="comment">//参数二：10是等待时间</span></span><br><span class="line">HAL_ADC_Stop(&amp;hadc1);</span><br><span class="line">    buf2 = HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、中断法"><a href="#二、中断法" class="headerlink" title="二、中断法"></a>二、中断法</h2><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>在CubeMX配置ADC中断，即可在对应文件自动生成中断处理函数，在ADC.c下编写用户中断回调函数即可，如下：</p><p><img src="/../images/ADC2.png"></p><p><strong>需要注意的是：使用中断前，需要在主函数中添加如下代码（放在外设初始化函数之后，声明一次即可），确保中断使能，ADC开始工作：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__HAL_ADC_ENABLE_IT(&amp;hadc1,ADC_IT_EOC);</span><br><span class="line">HAL_ADC_Start(&amp;hadc1);</span><br></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>直接在主函数中的外设初始化函数之后，添加如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_ADC_Start_IT(&amp;hadc1);</span><br></pre></td></tr></table></figure><p>此函数比较特殊，调用一次就相当于打开了<strong>ADC转换完成中断</strong>和<strong>开启ADC采样</strong>。</p><p><em><strong>注意：当ADC配置开启连续采集模式时，在中断回调函数结尾需要加上ADC中断使能函数HAL_ADC_Start_IT(&amp;hadc)，来手动开启中断！！</strong></em></p><h2 id="三、DMA"><a href="#三、DMA" class="headerlink" title="三、DMA"></a>三、DMA</h2><p>dma有两种模式，分别为circular和normal。</p><ul><li>circular模式：dma的circular模式只需要调用一次dma开启函数，dma就会持续的搬运数据，提高了数据的刷新速度，但是在circular模式下，不管adc新的一轮数据采集是否完成，有可能直接将旧数据搬运走。</li><li>normal模式：该模式下，dma启动函数调用一次，dma通道只会搬运一次数据，这样每调一次dma启动函数，dma只会搬运一次数据，等待数据传输完成后再次开启dma启动函数，这样更能保证adc数据采集的可靠性。</li></ul><h4 id="Circular模式："><a href="#Circular模式：" class="headerlink" title="Circular模式："></a>Circular模式：</h4><p>在CubeMX配置完ADC的DMA功能后，需要在主函数中调用如下代码（一次就行，即外设初始化后）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint16_t</span> AD_value=<span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> f_AD_value;</span><br><span class="line"></span><br><span class="line">**************</span><br><span class="line"><span class="comment">//外设初始化</span></span><br><span class="line">**************</span><br><span class="line">    </span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1,(<span class="type">uint32_t</span>*)&amp;AD_value,<span class="keyword">sizeof</span>(AD_value));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，CubeMX中配置完DMA，会在中断文件（stm32f4xx_it.c）中自动生成DMA中断处理函数，用户在此编写处理程序或中断回调函数中编写都可。</p><p>如下：</p><p><img src="/../images/ADC3.png"></p><p>加上标志位检测，是为了确保DMA在Circular模式下数据不发生遗漏，错误。因此，在normal模式下，一般不加标志检测。</p><h4 id="normal模式"><a href="#normal模式" class="headerlink" title="normal模式"></a>normal模式</h4><p>与Circular模式配置基本相似，区别在于采集模式（ContinuousConvMode）的选择以及是否在中断处理中是否添加标志检测。</p><p>参考链接：<a href="https://blog.csdn.net/weixin_46461874/article/details/128686185?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-5-128686185-blog-117872009.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-5-128686185-blog-117872009.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=8">https://blog.csdn.net/weixin_46461874/article/details/128686185?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-5-128686185-blog-117872009.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-5-128686185-blog-117872009.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=8</a></p>]]></content>
      
      
      <categories>
          
          <category> HAL库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32,ADC,DMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAL库开发（一）——回调函数</title>
      <link href="/2023/03/02/HAL%E5%BA%93%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
      <url>/2023/03/02/HAL%E5%BA%93%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、为什么要回调函数"><a href="#一、为什么要回调函数" class="headerlink" title="一、为什么要回调函数"></a>一、为什么要回调函数</h2><p><em><strong>传统标准库的中断：在中断中进行数据处理，如果数据量比较大，再加上潜在的延时，极大的占用了CPU的时间，一直处在中断中，其他中断无法执行，主函数无法进行。</strong></em></p><p><strong>因此，在HAL库中，引入回调函数，工作方式如下图。即当发生中断时，cpu依旧进入中断处理函数（即中断入口），但中断处理函数不做数据处理，而是标记中断回调函数，退出中断，间接调用回调函数，然后在中断回调函数里执行数据的处理。好处就是，这样做给其他中断有了中断时间，不浪费中断资源。</strong></p><p><img src="/../images/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B01.png" alt="查询法与中断法"></p><p><img src="/../images/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B02.png" alt="回调函数处理过程"></p><h2 id="二、回调函数的使用"><a href="#二、回调函数的使用" class="headerlink" title="二、回调函数的使用"></a>二、回调函数的使用</h2><p>在CubeMX配置好后，相应的中断处理函数会在stm32f4xx_it.c中自动配置好，基本形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DMA2_Stream0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END DMA2_Stream0_IRQn 0 */</span></span><br><span class="line">  HAL_DMA_IRQHandler(&amp;hdma_adc1);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END DMA2_Stream0_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在中断处理函数中都会指向：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_XXX_IRQHandler(&amp;XXX);</span><br></pre></td></tr></table></figure><p>这个函数就会间接调用回调函数。回调函数在相应HAL驱动库的C文件中，前面有__week定义，其意义在于当用户有自己定义的回调函数时，优先执行用户的回调函数，用户回调函数名需与官方回调函数名一致。</p><p>形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Prevent unused argument(s) compilation warning */</span></span><br><span class="line">  UNUSED(huart);</span><br><span class="line">  <span class="comment">/* <span class="doctag">NOTE:</span> This function should not be modified, when the callback is needed,</span></span><br><span class="line"><span class="comment">           the HAL_UART_RxCpltCallback could be implemented in the user file</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于用户对于数据的处理以及一些自定义的需求，可以在此中断回调函数中编写。</strong></p>]]></content>
      
      
      <categories>
          
          <category> HAL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32,HAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物联网网络协议——MQTT协议（一）</title>
      <link href="/2023/02/17/%E7%89%A9%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E2%80%94%E2%80%94MQTT%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/02/17/%E7%89%A9%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E2%80%94%E2%80%94MQTT%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>MQTT通讯协议是定义在TCP协议之上的：</p><ol><li>TCP通讯协议可以理解为接近底层，保障双向通信。</li><li>报障电话接通是TCP，我们和对方说的方言是MQTT。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断一帧数据接收完成的常见方法</title>
      <link href="/2023/02/17/%E5%88%A4%E6%96%AD%E4%B8%80%E5%B8%A7%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6%E5%AE%8C%E6%88%90%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/17/%E5%88%A4%E6%96%AD%E4%B8%80%E5%B8%A7%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6%E5%AE%8C%E6%88%90%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、延时检测"><a href="#一、延时检测" class="headerlink" title="一、延时检测"></a>一、延时检测</h2><h4 id="使用定时器判断"><a href="#使用定时器判断" class="headerlink" title="使用定时器判断"></a>使用定时器判断</h4><p>这种方法建立在两帧数据不可能连续发送的基础上，也是modbus判断帧结束的方式，在接受到第一个字节的时候打开定时器，如果继续接收到数据则更新定时器，在被设定时间内没有接收到数据则定时器超时，标志一帧数据接收完毕。</p><p><img src="/../images/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%B8%A7%E6%95%B0%E6%8D%AE%E5%88%A4%E6%96%AD%E9%80%BB%E8%BE%91%E6%A1%86%E5%9B%BE.png" alt="定时器帧数据判断逻辑框图"></p><h4 id="关于定时器的设定时间有几个问题："><a href="#关于定时器的设定时间有几个问题：" class="headerlink" title="关于定时器的设定时间有几个问题："></a>关于定时器的设定时间有几个问题：</h4><ul><li>其一是如果定时器超时时间大于发送两帧数据的时间间隔，则接收到的一帧数据实际上是几帧，更可能定时器无法超时，一直处于接收状态。</li><li>其二是如果定时器超时小于发生两个字节的时间间隔，则在接收到1个字节定时器就超时了。</li></ul><p>我们于是只能设定一个尽量小但又不影响接收连续字节的时间，例如ModBus通信时规定发送完一组命令必须间隔3.5个字符时间间隔再发送下一组新命令，这里规定的便是定时器的超时时间。</p><h4 id="关于时间的计算"><a href="#关于时间的计算" class="headerlink" title="关于时间的计算"></a>关于时间的计算</h4><p>首先，1个字符窗口包含起始位，数据位，校验位，停止位，其中有些位长度不一定，这里我们按1+8+1+1来计算。波特率表示的意思是在1000ms内可以传送的位数，设3.5个字节所用时间为X，波特率为9600则:<br> 3.5*11 &#x2F; X  &#x3D; 9600 &#x2F; 1000<br> X &#x3D; 4.010416666666667 ms<br> X代表的意思是两帧数据间隔时间至少为此，我们程序的超时定时器可以设定为4ms。同时也知道波特率变化是会影响该值。</p><h2 id="二、解析协议方式"><a href="#二、解析协议方式" class="headerlink" title="二、解析协议方式"></a>二、解析协议方式</h2><p>该方式便是通过协议中的保存的长度、包头、包尾等信息来判断帧接收完成。通常是将数据保存在一个循环buffer中，从中去找对应信息，根据信息判断取出一帧数据还是继续等待。</p><h2 id="三、空闲中断"><a href="#三、空闲中断" class="headerlink" title="三、空闲中断"></a>三、空闲中断</h2><p>在STM32中有个串口空闲中断，在总线由忙碌转为空闲时(RXNE被置为)参数这个中断，我们可以利用这个中断来知道一帧传输接收，需要进行处理。</p><h5 id="更多信息请查看："><a href="#更多信息请查看：" class="headerlink" title="更多信息请查看："></a>更多信息请查看：</h5><p><a href="https://www.jianshu.com/p/bb0ab9a58eff#:~:text=%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E5%AE%8C%E6%88%90%E4%B8%80%E5%B8%A7%E6%95%B0%E6%8D%AE%201%201%20%E4%BD%BF%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8%E5%88%A4%E6%96%AD%20%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%BB%BA%E7%AB%8B%E5%9C%A8%E4%B8%A4%E5%B8%A7%E6%95%B0%E6%8D%AE%E4%B8%8D%E5%8F%AF%E8%83%BD%E8%BF%9E%E7%BB%AD%E5%8F%91%E9%80%81%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%8C%E4%B9%9F%E6%98%AFmodbus%E5%88%A4%E6%96%AD%E5%B8%A7%E7%BB%93%E6%9D%9F%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%9C%A8%E6%8E%A5%E6%94%B6%E5%88%B0%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E7%9A%84%E6%97%B6%E5%80%99%E6%89%93%E5%BC%80%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%BB%A7%E7%BB%AD%E6%8E%A5%E6%94%B6%E5%88%B0%E6%95%B0%E6%8D%AE%E5%88%99%E6%9B%B4%E6%96%B0%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%8C%E5%9C%A8%E8%A2%AB%E8%AE%BE%E5%AE%9A%E6%97%B6%E9%97%B4%E5%86%85%E6%B2%A1%E6%9C%89%E6%8E%A5%E6%94%B6%E5%88%B0%E6%95%B0%E6%8D%AE%E5%88%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%B6%85%E6%97%B6%E3%80%82%20enter%20image%20description,%E9%80%9A%E5%B8%B8%E6%98%AF%E5%B0%86%E6%95%B0%E6%8D%AE%E4%BF%9D%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BE%AA%E7%8E%AFbuffer%E4%B8%AD%EF%BC%8C%E4%BB%8E%E4%B8%AD%E5%8E%BB%E6%89%BE%E5%AF%B9%E5%BA%94%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%A0%B9%E6%8D%AE%E4%BF%A1%E6%81%AF%E5%88%A4%E6%96%AD%E5%8F%96%E5%87%BA%E4%B8%80%E5%B8%A7%E6%95%B0%E6%8D%AE%E8%BF%98%E6%98%AF%E7%BB%A7%E7%BB%AD%E7%AD%89%E5%BE%85%E3%80%82%203%203%20%E7%A9%BA%E9%97%B2%E4%B8%AD%E6%96%AD%20%E5%9C%A8STM32%E4%B8%AD%E6%9C%89%E4%B8%AA%E4%B8%B2%E5%8F%A3%E7%A9%BA%E9%97%B2%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%9C%A8%E6%80%BB%E7%BA%BF%E7%94%B1%E5%BF%99%E7%A2%8C%E8%BD%AC%E4%B8%BA%E7%A9%BA%E9%97%B2%E6%97%B6%20%28RXNE%E8%A2%AB%E7%BD%AE%E4%B8%BA%29%E5%8F%82%E6%95%B0%E8%BF%99%E4%B8%AA%E4%B8%AD%E6%96%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E8%BF%99%E4%B8%AA%E4%B8%AD%E6%96%AD%E6%9D%A5%E7%9F%A5%E9%81%93%E4%B8%80%E5%B8%A7%E4%BC%A0%E8%BE%93%E6%8E%A5%E6%94%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%E3%80%82%20%E4%B8%8B%E9%9D%A2%E6%98%AFSMT32L151%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%EF%BC%8C%E9%A6%96%E5%85%88%E5%9C%A8%E4%B8%B2%E5%8F%A3%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%B6%EF%BC%8C%E4%B9%9F%E4%BD%BF%E8%83%BD%E7%A9%BA%E9%97%B2%E4%B8%AD%E6%96%AD%20">如何判断串口接收完成一帧数据</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据帧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据帧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机选型</title>
      <link href="/2023/02/15/%E5%8D%95%E7%89%87%E6%9C%BA%E9%80%89%E5%9E%8B/"/>
      <url>/2023/02/15/%E5%8D%95%E7%89%87%E6%9C%BA%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="单片机选型"><a href="#单片机选型" class="headerlink" title="单片机选型"></a>单片机选型</h2><p>一般来说在选取单片机时从下面几个方面考虑：性能、存储器、运行速度、I&#x2F;O口、定时&#x2F;计数器、串行接口、模拟电路功能、工作电压、功耗、封装形式、抗干扰性、保密性。</p><p>除了以上的一些方面外，还有一些最基本的条件，比如：中断源的数量和优先级、工作温度范围、有没有低电压检测功能、单片机内有无时钟振荡器、有无上电复位功能等。</p><p>在开发过程中还要考虑开发工具、编程器、开发成本、开发人员的适应性、技术支持和服务等因素。</p>]]></content>
      
      
      <categories>
          
          <category> 选型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机选型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机定时器介绍</title>
      <link href="/2023/02/13/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/02/13/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="定时器介绍"><a href="#定时器介绍" class="headerlink" title="定时器介绍"></a>定时器介绍</h2><h4 id="基本知识："><a href="#基本知识：" class="headerlink" title="基本知识："></a>基本知识：</h4><p><strong>1.CPU 时序的有关知识</strong></p><p>①振荡周期：为单片机提供定时信号的振荡源的周期（晶振周期或外加振荡</p><p>周期）。</p><p>②状态周期：2 个振荡周期为 1 个状态周期，用 S 表示。振荡周期又称 S 周</p><p>期或时钟周期。</p><p>③机器周期：1 个机器周期含 6 个状态周期，12 个振荡周期。</p><p>④指令周期：完成 1 条指令所占用的全部时间，它以机器周期为单位。</p><p>例如：外接晶振为 12MHz 时，51 单片机相关周期的具体值为：</p><p>振荡周期&#x3D;1&#x2F;12us;</p><p>状态周期&#x3D;1&#x2F;6us;</p><p>机器周期&#x3D;1us;</p><p>指令周期&#x3D;1~4us;</p><p><strong>有了定时器&#x2F;计数器之后，可以增加单片机的效率，一些简单的重复加 1 的工作可以交给定时器&#x2F;计数器处理。CPU 转而处理一些复杂的事情。同时可以实现精确定时作用。</strong></p><h4 id="定时器原理："><a href="#定时器原理：" class="headerlink" title="定时器原理："></a>定时器原理：</h4><p>前面我们介绍过机器周期的概念，它是 CPU 完成一个基本操作所需要的时间。其计算公式是：机器周期&#x3D;1&#x2F;单片机的时钟频率。51 单片机内部时钟频率是外部时钟的 12 分频，也就是说当外部晶振的频率输入到单片机里面的时候要进行 12分频。比如说你用的是 12MHZ 晶振，那么单片机内部的时钟频率就是 12&#x2F;12MHZ，当你使用 12MHZ 的外部晶振的时候，机器周期&#x3D;1&#x2F;1M&#x3D;1us。如果我们想定时 1ms的初值是多少呢？1ms&#x2F;1us&#x3D;1000。也就是要计数 1000 个，初值&#x3D;65535-1000+1（因为实际上计数器计数到 65536（2 的 16 次方）才溢出，所以后面要加 1）&#x3D;64536&#x3D;FC18H，所以初值即为 THx&#x3D;0XFC，TLx&#x3D;0X18。</p>]]></content>
      
      
      <categories>
          
          <category> 定时器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串口波特率的产生</title>
      <link href="/2023/02/13/%E4%B8%B2%E5%8F%A3%E6%B3%A2%E7%89%B9%E7%8E%87%E7%9A%84%E4%BA%A7%E7%94%9F/"/>
      <url>/2023/02/13/%E4%B8%B2%E5%8F%A3%E6%B3%A2%E7%89%B9%E7%8E%87%E7%9A%84%E4%BA%A7%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、stc单片机串口波特率的产生"><a href="#一、stc单片机串口波特率的产生" class="headerlink" title="一、stc单片机串口波特率的产生"></a>一、stc单片机串口波特率的产生</h2><h4 id="1-stc单片机"><a href="#1-stc单片机" class="headerlink" title="1.stc单片机"></a>1.stc单片机</h4><h5 id="①传统51单片机："><a href="#①传统51单片机：" class="headerlink" title="①传统51单片机："></a>①传统51单片机：</h5><p>传统单片机是12T的，就是说12个时钟周期（晶振周期，例如12M的，周期是1&#x2F;12M，单位秒），机器做一个指令周期，刚好就是1&#x2F;12M*12&#x3D;1us。</p><p>而串口的波特率是通过定时器产生的，当SMOD&#x3D;1时，K&#x3D;2，波特率加倍，公式为：</p><p><strong>波特率&#x3D;K×11059200&#x2F;（32×12×(256-TH1)）</strong>，所以即使令TH1&#x3D;0xff，所得波特率最大只能为57600,</p><p><em><strong>所以，传统单片机波特率不能设置115200，一般用9600！</strong></em></p><h5 id="②新型stc单片机："><a href="#②新型stc单片机：" class="headerlink" title="②新型stc单片机："></a>②新型stc单片机：</h5><p>新型单片机，如stc12，stc8h等都支持了1T模式，即1个机器周期等于1个振荡周期。</p><p> 1T 模式 (不分频) —— 1个系统基本时钟，执行一个动作；<br> 12T模式(12分频) —— 12个系统基本时钟，执行一个动作；</p><p>因此，12T模式和1T模式执行相同次数的动作，12T模式需要12倍的时间，<br>即，两个模式执行一个动作需要的时间不同，12T模式需要更多的时间，<br>即，1T模式的工作速度比12T模式的工作速度快。</p><p>此时，1T模式的<strong>波特率&#x3D;2（SMOD次方）x SYSclk&#x2F;（12 x 32 x（256-（TH1，TL1）））</strong>,不同定时器计算公式有略微差别！</p><p>例如：stc8H单片机，其串口1波特率发生模式有两种：</p><ol><li><p>串口1模式0和模式2的时候，波特率是固定的，由主频决定，计算公式为<strong>波特率&#x3D;SYSclk&#x2F;12</strong>。</p></li><li><p>串口1模式1和模式3的时候，波特率由定时器发生。计算公式如下图：</p><p><img src="/../images/%E4%B8%B2%E5%8F%A3%E6%B3%A2%E7%89%B9%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png" alt="串口波特率计算公式"></p></li></ol><h5 id="以定时器为例："><a href="#以定时器为例：" class="headerlink" title="以定时器为例："></a>以定时器为例：</h5><p>【定时器工作原理】定时器从初值开始计数加1，一直加到溢出，产生定时器中断。</p><p>【定时器配置】现在有一个使用24MHz晶振的单片机，使用定时器0的16位工作模式，产生1000Hz的频率，即1ms产生一次中断。</p><p>【 1T 】TH0 &#x3D; 0xA2; TL0 &#x3D; 0x40; 定时器从A240计数到FFFF产生中断。<br>【12T】TH0 &#x3D; 0xF8; TL0 &#x3D; 0x30; 定时器从F830计数到FFFF产生中断。</p><p>定时器1T模式计数FFFF - A240 &#x3D; 23999次产生中断，定时器12T模式计数FFFF - F830 &#x3D; 1999次（1999*12&#x3D;23999）产生中断，所以实际上计数产生中断的时间是一样的。</p><p>所以，<br>当定时器产生中断的频率相同时，定时器的初值是不一样的，并且1T模式的初值比12T的初值要小，加到溢出的值要更多，但是两者溢出产生中断的时间是相等的。<br>当初值相同时，1T更快产生中断，12T需要12倍的时间才能产生中断。</p><h2 id="STM32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h2><p>对于STM32来说，其时钟树更为复杂。以stm32f103为例，USART1挂载在APB2上，最大频率为72MHz；USART2&#x2F;3挂载在APB1上，最大频率为36MHz。而STM32的USART的通信速率与USART时钟息息相关，详细可见stm32f103数据手册&#x2F;参考手册。</p><p>STM32的串口波特率是通过波特比率寄存器（USART_BRR)设置的，在STM32F103XX中文参考手册 中有这样一段介绍：</p><p><img src="/../images/stm32%E4%B8%B2%E5%8F%A3%E6%B3%A2%E7%89%B9%E7%8E%87.png" alt="stm32串口波特率"></p><p>我们得知：stm32的波特比率寄存器USART_BRR支持分数设置，精确度因此提高。在手册中给出了波特率的计算公式：</p><p><img src="/../images/stm32%E4%B8%B2%E5%8F%A3%E6%B3%A2%E7%89%B9%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png"></p><p>例如：</p><p>假设我们需要实现2.5Mbit&#x2F;s的通信速率，由上我们知道只有STM32的USART1可以实现该通信速率。</p><p>USART1的外设时钟(fck)为72MHz，fck &#x2F; 波特率 &#x3D; 16 * USARTDIV  &#x3D;&#x3D;&#x3D;》 USARTDIV &#x3D; 1.8，将整数部分1 &#x3D; 0x01写入USART_BRR的位15：4，小数部分（0.8 * 16） &#x3D; 12.5 ≈ 13 &#x3D; 0xD写入USART_BRR的位3：0即可。USART_BRR的值为0x1D；值得注意的是：使用库函数不用自行写入USART_BRR的值。</p><p>更详细内容可参考下方文章：</p><p><a href="http://news.eeworld.com.cn/mcu/ic520335.html#:~:text=%E3%80%80%E3%80%80STM32%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%B3%A2%E7%89%B9%E7%8E%87%E6%98%AF%E9%80%9A%E8%BF%87%20%E6%B3%A2%E7%89%B9%E6%AF%94%E7%8E%87%E5%AF%84%E5%AD%98%E5%99%A8%28USART_BRR%29%20%E8%AE%BE%E7%BD%AE%E7%9A%84%EF%BC%8C%E5%9C%A8%20STM32F103XX%E4%B8%AD%E6%96%87%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C,%E4%B8%AD%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E6%AE%B5%E4%BB%8B%E7%BB%8D%EF%BC%9A%20%E3%80%80%E3%80%80%E6%88%91%E4%BB%AC%E5%BE%97%E7%9F%A5%EF%BC%9ASTM32%E7%9A%84%20%E6%B3%A2%E7%89%B9%E6%AF%94%E7%8E%87%E5%AF%84%E5%AD%98%E5%99%A8USART_BRR%20%E6%94%AF%E6%8C%81%E5%88%86%E6%95%B0%E8%AE%BE%E7%BD%AE%EF%BC%8C%E7%B2%BE%E7%A1%AE%E5%BA%A6%E5%9B%A0%E6%AD%A4%E6%8F%90%E9%AB%98%E3%80%82">STM32之关于USART以及波特率的一些思考-电子工程世界</a></p>]]></content>
      
      
      <categories>
          
          <category> 波特率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 波特率的产生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp网络编程——TCP/IP编程</title>
      <link href="/2023/02/10/CSharp%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94TCP-IP/"/>
      <url>/2023/02/10/CSharp%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94TCP-IP/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Socket网络编程"><a href="#一、Socket网络编程" class="headerlink" title="一、Socket网络编程"></a>一、Socket网络编程</h2><p>Socket：套接字，用于描述IP地址和端口，是一个通信链的句柄，用以实现计算机之间通信。</p><p>有了服务器的IP地址和端口号，客户端才知道需要链接服务器哪个程序，建立socket连接。</p><h2 id="二、TCP-x2F-UDP协议"><a href="#二、TCP-x2F-UDP协议" class="headerlink" title="二、TCP&#x2F;UDP协议"></a>二、TCP&#x2F;UDP协议</h2><ul><li>TCP协议：安全稳定，效率低，不会发生数据丢失。要求必须有一个服务器，因为要经历三次握手过程：<ul><li>1）客户端请求；</li><li>2）服务器响应；</li><li>3）客户端得知服务器响应</li></ul></li><li>UDP协议：效率高，但有可能发生数据丢失。不用经过服务器响应是否有空闲接收消息，自主传输。</li></ul><h2 id="三、创建客户端"><a href="#三、创建客户端" class="headerlink" title="三、创建客户端"></a>三、创建客户端</h2><ol><li>创建负责通信的socket</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketSend = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork,SocketType,Stream,ProtocolType.Tcp);</span><br></pre></td></tr></table></figure><ol start="2"><li>获取将要连接的服务器的IP和程序的端口</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IPAddress ip = IPAddress.Parse(txtServer.Text.Trim());</span><br><span class="line">   ↓</span><br><span class="line"> 控件名</span><br><span class="line">IPEndPoint point = <span class="keyword">new</span> IPEndPoint(ip,Convert.ToInt32(txtPort.Text.Trim()));</span><br><span class="line">↓</span><br><span class="line">   控件名</span><br></pre></td></tr></table></figure><ol start="3"><li>建立连接</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socketSend.Connect(point);</span><br><span class="line">ShowMsg(<span class="string">&quot;发送成功&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>给服务器发送消息</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = txtmessage.Text.Trim();<span class="comment">//获取要发送的消息</span></span><br><span class="line">   ↓</span><br><span class="line">   控件名</span><br><span class="line"><span class="built_in">byte</span>[] buffer = Encoding.UTF8.GetBytes(str);<span class="comment">//转成字节数组</span></span><br><span class="line">socketSend.Send(buffer);<span class="comment">//发送字节数组</span></span><br></pre></td></tr></table></figure><ol start="5"><li>不停的接收服务器发来的消息</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意：接收也要写在<span class="keyword">while</span>(<span class="literal">true</span>)里面，需要一直接受客户端发过来的消息，并且需要创建后台新线程来执行它。</span><br><span class="line"><span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span>];<span class="comment">//定义一个字节数组</span></span><br><span class="line"><span class="built_in">int</span> r = socketSend.Receive(buffer);<span class="comment">//接收字节数组放入buffer中，返回接收字节数</span></span><br><span class="line"><span class="keyword">if</span>(r == <span class="number">0</span>) <span class="keyword">return</span>;<span class="comment">//如果没有信息接收，结束该循环</span></span><br><span class="line"><span class="built_in">string</span> str = Encoding.UTF8.GetString(buffer,<span class="number">0</span>,r);<span class="comment">//将接收的字节数组转成字符串</span></span><br><span class="line">ShowMsg(socketSend.RemoteEndPoint.Tostring() + <span class="string">&quot;:&quot;</span> + str);</span><br></pre></td></tr></table></figure><h2 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h2><h4 id="连接服务器："><a href="#连接服务器：" class="headerlink" title="连接服务器："></a>连接服务器：</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 连接服务器端</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_wangkouOPEN_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           btn_wangkouOPEN.Enabled = <span class="literal">false</span>;</span><br><span class="line">           <span class="comment">//创建客户端Socket</span></span><br><span class="line">           ClientSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">           rtb_textshow.Text += <span class="string">&quot;正在连接......&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">           <span class="comment">//IP和端口号转换格式</span></span><br><span class="line">           IPAddress ServerIP = IPAddress.Parse(tb_ipaddress.Text);</span><br><span class="line">           <span class="built_in">int</span> Port = <span class="built_in">int</span>.Parse(tb_ipport.Text);</span><br><span class="line">           <span class="comment">//IP和端口号绑定</span></span><br><span class="line">           IPEndPoint ServerAddress = <span class="keyword">new</span> IPEndPoint(ServerIP, Port);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//客户端Socket连接服务器地址</span></span><br><span class="line">               ClientSocket.Connect(ServerAddress);</span><br><span class="line">               SFlag = <span class="number">1</span>;  <span class="comment">//若连接成功将标志设置为1</span></span><br><span class="line">               rtb_textshow.Text += DateTime.Now.ToString(<span class="string">&quot;yy-MM-dd hh:mm:ss  &quot;</span>) + tb_ipaddress.Text + <span class="string">&quot;连接成功&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">               btn_wangkouOPEN.Enabled = <span class="literal">false</span>;     <span class="comment">//禁止操作连接按钮</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//开启一个线程接收数据</span></span><br><span class="line">               th1 = <span class="keyword">new</span> Thread(Receive);</span><br><span class="line">               th1.IsBackground = <span class="literal">true</span>;</span><br><span class="line">               th1.Start(ClientSocket);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span></span><br><span class="line">           &#123;</span><br><span class="line">               MessageBox.Show(<span class="string">&quot;服务器未打开&quot;</span>);</span><br><span class="line">               btn_wangkouOPEN.Enabled = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">#<span class="keyword">region</span></span></span><br><span class="line">           <span class="comment">/*****</span></span><br><span class="line"><span class="comment">           serverIP = IPAddress.Parse(tb_ipaddress.Text);</span></span><br><span class="line"><span class="comment">           try</span></span><br><span class="line"><span class="comment">           &#123;</span></span><br><span class="line"><span class="comment">               serverFullAddr = new IPEndPoint(serverIP, int.Parse(tb_ipport.Text));//设置IP，端口</span></span><br><span class="line"><span class="comment">               ClientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span></span><br><span class="line"><span class="comment">               //指定本地主机地址和端口号</span></span><br><span class="line"><span class="comment">               ClientSocket.Connect(serverFullAddr);</span></span><br><span class="line"><span class="comment">               //btnConn.Enabled = false;</span></span><br><span class="line"><span class="comment">               //rtb_textshow.Text = &quot;连接服务器成功。。。。&quot;;</span></span><br><span class="line"><span class="comment">               MessageBox.Show(&quot;连接服务器成功！&quot;);</span></span><br><span class="line"><span class="comment">               btn_wangkouCLOSE.Enabled = true;</span></span><br><span class="line"><span class="comment">               //sock.Close();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">           catch (Exception ee)</span></span><br><span class="line"><span class="comment">           &#123;</span></span><br><span class="line"><span class="comment">               btn_wangkouOPEN.Enabled = true;</span></span><br><span class="line"><span class="comment">               btn_wangkouCLOSE.Enabled = false;</span></span><br><span class="line"><span class="comment">               MessageBox.Show(&quot;连接服务器失败！&quot;);</span></span><br><span class="line"><span class="comment">               rtb_textshow.Text = &quot;连接服务器失败。。。请仔细检查服务器是否开启&quot; + ee;</span></span><br><span class="line"><span class="comment">               return;</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">           ******/</span></span><br><span class="line">           <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h4 id="断开网络连接"><a href="#断开网络连接" class="headerlink" title="断开网络连接"></a>断开网络连接</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 断开网络连接</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_wangkouCLOSE_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//保证是在连接状态下退出</span></span><br><span class="line">            <span class="keyword">if</span> (SFlag == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] send = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                send = Encoding.ASCII.GetBytes(<span class="string">&quot;*close*&quot;</span>);  <span class="comment">//关闭客户端时给服务器发送一个退出标志</span></span><br><span class="line">                ClientSocket.Send(send);</span><br><span class="line"></span><br><span class="line">                th1.Abort();    <span class="comment">//关闭线程</span></span><br><span class="line">                ClientSocket.Close();   <span class="comment">//关闭套接字</span></span><br><span class="line"></span><br><span class="line">                btn_wangkouOPEN.Enabled = <span class="literal">true</span>;  <span class="comment">//允许操作按钮</span></span><br><span class="line">                SFlag = <span class="number">0</span>;  <span class="comment">//客户端退出后将连接成功标志程序设置为0</span></span><br><span class="line">                rtb_textshow.Text += DateTime.Now.ToString(<span class="string">&quot;yy-MM-dd hh:mm:ss  &quot;</span>);</span><br><span class="line">                rtb_textshow.Text += <span class="string">&quot;客户端已关闭&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;已关闭连接&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h4 id="接收服务器端数据"><a href="#接收服务器端数据" class="headerlink" title="接收服务器端数据"></a>接收服务器端数据</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 接收服务器端数据</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Receive</span>(<span class="params">Object sk</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Socket socketRec = sk <span class="keyword">as</span> Socket;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//5.接收数据</span></span><br><span class="line">               <span class="comment">//byte[] receive = new byte[4];                 //receive是十进制字节数组</span></span><br><span class="line">               ClientSocket.Receive(receive);  <span class="comment">//调用Receive()接收字节数据</span></span><br><span class="line">               left_temp = receive[<span class="number">0</span>];</span><br><span class="line">               right_temp = receive[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//6.打印接收数据</span></span><br><span class="line">               <span class="keyword">if</span> (receive.Length &gt; <span class="number">0</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   rtb_textshow.Text += DateTime.Now.ToString(<span class="string">&quot;yy-MM-dd hh:mm:ss  &quot;</span>) + <span class="string">&quot;接收：&quot;</span>;   <span class="comment">//打印接收时间</span></span><br><span class="line">                   <span class="comment">//rtb_textshow.Text += byteToHexStr(receive) + &quot;\r\n&quot;;  //将字节数据根据ASCII码转成字符串   //字符显示Encoding.ASCII.GetString(receive)        //16进制显示byteToHexStr(receive)</span></span><br><span class="line">                   <span class="comment">//rtb_textshow.Text += rtb_send.Text + &quot;\r\n&quot;;                                                                                  //rtb_textshow.Text += BitConverter.ToInt32(receive,0) + &quot;\r\n&quot;;</span></span><br><span class="line">                   rtb_textshow.Text += <span class="string">&quot;左边温度：&quot;</span> + left_temp + <span class="string">&quot;\r\n&quot;</span>;                       <span class="comment">//已经是十进制了</span></span><br><span class="line">                   rtb_textshow.Text += <span class="string">&quot;右边温度：&quot;</span> + right_temp + <span class="string">&quot;\r\n&quot;</span>;    </span><br><span class="line"></span><br><span class="line">                   <span class="comment">//测试receive[0]数据类型</span></span><br><span class="line">                   <span class="comment">//rtb_textshow.Text += Convert.ToString(left_temp_high).GetType();                //system.string</span></span><br><span class="line">                   <span class="comment">//rtb_textshow.Text += receive[0];//.GetType();                                //receive[0] = 12 (ASCII码值）     //system.byte</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h4 id="向服务器端发送数据"><a href="#向服务器端发送数据" class="headerlink" title="向服务器端发送数据"></a>向服务器端发送数据</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 向服务器端发送数据</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_send_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (SFlag == <span class="number">1</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="built_in">byte</span>[] send = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                   send = HexStringToByteArray(rtb_send.Text);</span><br><span class="line">                   <span class="comment">//send = Encoding.ASCII.GetBytes(rtb_send.Text);  //将文本内容转换成字节发送</span></span><br><span class="line">                   ClientSocket.Send(send);    <span class="comment">//调用Send()函数发送数据</span></span><br><span class="line"></span><br><span class="line">                   rtb_textshow.Text += DateTime.Now.ToString(<span class="string">&quot;yy-MM-dd hh:mm:ss  &quot;</span>) + <span class="string">&quot;发送：&quot;</span>;   <span class="comment">//打印发送数据的时间</span></span><br><span class="line">                   rtb_textshow.Text += rtb_send.Text + <span class="string">&quot;\n&quot;</span>;   <span class="comment">//打印发送的数据  rtb_send.Text + &quot;\n&quot;; </span></span><br><span class="line">                   rtb_send.Clear();   <span class="comment">//清空发送框</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C#网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#,网络开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（四）——寻找数组中前三最大值</title>
      <link href="/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E5%89%8D%E4%B8%89%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E5%89%8D%E4%B8%89%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="寻找数组最大值"><a href="#寻找数组最大值" class="headerlink" title="寻找数组最大值"></a>寻找数组最大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找数组前三最大值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_max</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> firstmax=<span class="number">0</span>,secondmax=<span class="number">0</span>,thirdmax=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> first_num=<span class="number">0</span>,second_num=<span class="number">0</span>,third_num=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">        firstmax = arr[lowest_count];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==firstmax || arr[i]==secondmax || arr[i]==thirdmax) <span class="keyword">continue</span>; <span class="comment">//去重</span></span><br><span class="line">            <span class="keyword">if</span>(firstmax &lt;= arr[i])</span><br><span class="line">            &#123;</span><br><span class="line">                thirdmax = secondmax;</span><br><span class="line">                third_num = second_num;</span><br><span class="line">                secondmax = firstmax;</span><br><span class="line">                second_num = first_num;</span><br><span class="line">                firstmax = arr[i];</span><br><span class="line">                first_num = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(secondmax &lt;= arr[i])</span><br><span class="line">            &#123;</span><br><span class="line">                thirdmax = secondmax;</span><br><span class="line">                third_num = second_num;</span><br><span class="line">                secondmax = arr[i];</span><br><span class="line">                second_num = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(thirdmax &lt;= arr[i])</span><br><span class="line">            &#123;</span><br><span class="line">                    thirdmax = arr[i];</span><br><span class="line">                    third_num = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            printf(&quot;第一个最大值：%d，第一个最大值下标：%d\n&quot;,firstmax,first_num);</span></span><br><span class="line"><span class="comment">//            printf(&quot;第二个最大值：%d，第二个最大值下标：%d\n&quot;,secondmax,second_num);</span></span><br><span class="line"><span class="comment">//            printf(&quot;第三个最大值：%d，第三个最大值下标：%d\n&quot;,thirdmax,third_num);</span></span><br><span class="line"><span class="comment">//            printf(&quot;\n&quot;);</span></span><br><span class="line">            <span class="comment">//printf(&quot;第%d次：第一最大值：%d，第二最大值：%d，第三最大值：%d\n\n&quot;,i+1,firstmax,secondmax,thirdmax);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第一个最大值firstmax：%d，第一个最大值下标first_num：%d\n&quot;</span>,firstmax,first_num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第二个最大值secondmax：%d，第二个最大值下标second_num：%d\n&quot;</span>,secondmax,second_num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第三个最大值thirdmax：%d，第三个最大值下标third_num：%d\n&quot;</span>,thirdmax,third_num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寻找数组最大值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（三）——数组寻找众数</title>
      <link href="/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84%E5%AF%BB%E6%89%BE%E4%BC%97%E6%95%B0/"/>
      <url>/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84%E5%AF%BB%E6%89%BE%E4%BC%97%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="寻找众数"><a href="#寻找众数" class="headerlink" title="寻找众数"></a>寻找众数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************</span></span><br><span class="line"><span class="comment">函数功能：找出出现次数最多的数</span></span><br><span class="line"><span class="comment">传入参数：arr：原数组，len：原数组长度</span></span><br><span class="line"><span class="comment">返 回 值：del_temp：需要剔除的元素，del_len：剔除后的数据长度</span></span><br><span class="line"><span class="comment">******************************/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">max_count_num</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * arr, <span class="type">unsigned</span> <span class="type">char</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> del_len;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> m;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> count;</span><br><span class="line"><span class="comment">//定义次数存储数组</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> max[len];</span><br><span class="line"><span class="comment">//数组初始化</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">max[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对数组中的元素进行count</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == arr[j])</span><br><span class="line">&#123;</span><br><span class="line">max[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出数组中元素的最大值</span></span><br><span class="line">m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (max[m] &lt; max[i]) &#123;</span><br><span class="line">m = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n出现次数最多的元素为：%d， 出现次数为：%d\n&quot;</span>, arr[m],max[m]);</span><br><span class="line">del_temp = arr[m];              <span class="comment">//删除出现最多的元素</span></span><br><span class="line">del_len = len - max[m];         <span class="comment">//删除出现次数</span></span><br><span class="line"><span class="keyword">return</span> del_len;                 <span class="comment">//返回剔除出现最多次数元素的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 众数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（二）——将数组以众数形式呈现</title>
      <link href="/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%B0%86%E6%95%B0%E7%BB%84%E4%BB%A5%E4%BC%97%E6%95%B0%E5%BD%A2%E5%BC%8F%E5%91%88%E7%8E%B0/"/>
      <url>/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%B0%86%E6%95%B0%E7%BB%84%E4%BB%A5%E4%BC%97%E6%95%B0%E5%BD%A2%E5%BC%8F%E5%91%88%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="将数组以众数形式呈现"><a href="#将数组以众数形式呈现" class="headerlink" title="将数组以众数形式呈现"></a>将数组以众数形式呈现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********</span></span><br><span class="line"><span class="comment">输入参数：1.原数组 2.原数组长度</span></span><br><span class="line"><span class="comment">输 出 值：众数形式呈现的数组</span></span><br><span class="line"><span class="comment">*******/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> origin_len 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">find_zs</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j=<span class="number">0</span>,k;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> newarr[origin_len];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        newarr[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;众数数组：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;len;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == arr[k])</span><br><span class="line">            &#123;</span><br><span class="line">                newarr[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;%d &quot;,newarr[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i+<span class="number">1</span>]==arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            newarr[i+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,newarr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> newarr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寻找众数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（一）——冒泡排序</title>
      <link href="/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/02/02/%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">mp</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序树组：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实例（三）——九九乘法表</title>
      <link href="/2023/01/29/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/"/>
      <url>/2023/01/29/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*****</span></span><br><span class="line"><span class="comment">题目：输出9*9口诀。</span></span><br><span class="line"><span class="comment">******/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%d\n&quot;</span>,i,j,i*j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%d &quot;</span>,i,j,i*j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stc单片机修改程序起始地址注意点</title>
      <link href="/2023/01/29/stc%E5%8D%95%E7%89%87%E6%9C%BA%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8F%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2023/01/29/stc%E5%8D%95%E7%89%87%E6%9C%BA%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8F%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>1.A51文件中更改AT值，即导致startup复位中断向量地址更改。<br>2.target的中断偏移向量更改，即导致单片机的中断偏移向量表更改。<br>3.更改target的EEPROM首地址，则导致单片机的用户程序地址更改。</p><p>所以，AT值和中断偏移值，不能和EEPROM首地址重合，否则会覆盖用户程序，导致用户程序无法运行。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件版本号命名规则</title>
      <link href="/2023/01/26/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%8F%B7%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
      <url>/2023/01/26/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%8F%B7%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p><strong>格式：</strong></p><p><strong>主版本号.子版本号.修订版本号.日期_版本阶段</strong></p><p>比如：V1.2.3.20220513_rc</p><p><strong>说明：</strong></p><p><strong>第一位（1）</strong>：主版本号。当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。</p><p><strong>第二位（2）</strong>：子版本号。当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。</p><p><strong>第三位（3）</strong>：修订版本号。一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。</p><p><strong>日期版本号（20201228）</strong>：用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。</p><p>**希腊字母版本号(rc)**：此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。</p><p><strong>软件版本阶段说明：</strong></p><p><strong>Base版:</strong> 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是作为整体网站的一个基础架构。</p><p><strong>Alpha版:</strong> 此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p><p><strong>Beta版:</strong> 该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对象是软件的UI。</p><p><strong>RC版:</strong> 该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。</p><p><strong>Release版:</strong> 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(Ｒ)。</p><p>当然还有一些大家经常在某些软件上看到版本所包含的英文词语，如果看不懂就比较尴尬了，但有一个测试版和一个专业版摆在面前，却因为不太了解这些常规命名而选错，下面大致了解下：</p><ul><li><p><strong>standard：标准版</strong></p></li><li><p><strong>full version：完整版，即正式版</strong></p></li><li><p><strong>lts：长期维护版本</strong></p></li><li><p><strong>ultimate：旗舰版</strong></p></li><li><p><strong>alpha：内部版本</strong></p></li><li><p><strong>beta：测试版</strong></p></li><li><p><strong>demo：演示版</strong></p></li><li><p><strong>enhance：增强版</strong></p></li><li><p><strong>free：自由版</strong></p></li><li><p><strong>lts：长期维护版本</strong></p></li><li><p><strong>release：发行版</strong></p></li><li><p><strong>rc：即将作为正式版发布</strong></p></li><li><p><strong>standard：标准版</strong></p></li><li><p><strong>upgrade：升级版</strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件版本命名规则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实例（二）——字符串翻转</title>
      <link href="/2023/01/26/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BF%BB%E8%BD%AC/"/>
      <url>/2023/01/26/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BF%BB%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="C-语言实例-字符串翻转"><a href="#C-语言实例-字符串翻转" class="headerlink" title="C 语言实例 - 字符串翻转"></a>C 语言实例 - 字符串翻转</h1><h3 id="一、使用递归来翻转字符串。"><a href="#一、使用递归来翻转字符串。" class="headerlink" title="一、使用递归来翻转字符串。"></a>一、使用递归来翻转字符串。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverseSentence</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个字符串: &quot;</span>);</span><br><span class="line">    reverseSentence();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">reverseSentence</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>( c != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        reverseSentence();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入一个字符串: runoob</span><br><span class="line">boonur</span><br></pre></td></tr></table></figure><h3 id="二、普通方法"><a href="#二、普通方法" class="headerlink" title="二、普通方法"></a>二、普通方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">main()</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="type">char</span> *str=<span class="string">&quot;i love you&quot;</span>;</span><br><span class="line">    <span class="type">char</span> strrev1[<span class="number">10</span>]; </span><br><span class="line">    <span class="type">int</span> i,length;</span><br><span class="line">    i=<span class="number">0</span>;length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(str[length]!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">    length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符串长度：%d&quot;</span>,length); <span class="comment">//可用&lt;string.h&gt;中的strlen代替 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原字符串：%s\n&quot;</span>,str);</span><br><span class="line">    <span class="keyword">while</span>(length&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">     strrev1[i++]=str[--length];    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;反转后字符串：%s\n&quot;</span>,strrev1);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实例（一）——进制转换</title>
      <link href="/2023/01/26/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
      <url>/2023/01/26/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、二进制转换为十进制"><a href="#一、二进制转换为十进制" class="headerlink" title="一、二进制转换为十进制"></a>一、二进制转换为十进制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ConvertBinaryToDecimal</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span>;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个二进制数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二进制数%lld对应的十进制数为：%d&quot;</span>,n,ConvertBinaryToDecimal(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ConvertBinaryToDecimal</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> remain;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,decimalNumber=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        remain = n%<span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        decimalNumber += remain*<span class="built_in">pow</span>(<span class="number">2</span>,i);</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> decimalNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、十进制转换为二进制"><a href="#二、十进制转换为二进制" class="headerlink" title="二、十进制转换为二进制"></a>二、十进制转换为二进制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">convertDecimalToBinary</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个十进制数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;十进制数 %d 转换为二进制位 %lld&quot;</span>, n, convertDecimalToBinary(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">convertDecimalToBinary</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> binaryNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> remainder, i = <span class="number">1</span>, step = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        remainder = n%<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Step %d: %d/2, 余数 = %d, 商 = %d\n&quot;</span>, step++, n, remainder, n/<span class="number">2</span>);</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">        binaryNumber += remainder*i;</span><br><span class="line">        i *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binaryNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、十进制转换为八进制"><a href="#三、十进制转换为八进制" class="headerlink" title="三、十进制转换为八进制"></a>三、十进制转换为八进制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">convertDecimalToOctal</span><span class="params">(<span class="type">int</span> decimalNumber)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> decimalNumber;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个十进制数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;decimalNumber);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;十进制数 %d 转换为八进制为 %d&quot;</span>, decimalNumber, convertDecimalToOctal(decimalNumber));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">convertDecimalToOctal</span><span class="params">(<span class="type">int</span> decimalNumber)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> octalNumber = <span class="number">0</span>, i = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (decimalNumber != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        octalNumber += (decimalNumber % <span class="number">8</span>) * i;</span><br><span class="line">        decimalNumber /= <span class="number">8</span>;</span><br><span class="line">        i *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> octalNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、八进制转换为十进制"><a href="#四、八进制转换为十进制" class="headerlink" title="四、八进制转换为十进制"></a>四、八进制转换为十进制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">convertOctalToDecimal</span><span class="params">(<span class="type">int</span> octalNumber)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> octalNumber;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个八进制数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;octalNumber);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;八进制数 %d  转换为十进制为 %lld&quot;</span>, octalNumber, convertOctalToDecimal(octalNumber));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">convertOctalToDecimal</span><span class="params">(<span class="type">int</span> octalNumber)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> decimalNumber = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(octalNumber != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        decimalNumber += (octalNumber%<span class="number">10</span>) * <span class="built_in">pow</span>(<span class="number">8</span>,i);</span><br><span class="line">        ++i;</span><br><span class="line">        octalNumber/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> decimalNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十八）——文件的输入与输出</title>
      <link href="/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/"/>
      <url>/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="C-文件的输入与输出"><a href="#C-文件的输入与输出" class="headerlink" title="C# 文件的输入与输出"></a>C# 文件的输入与输出</h1><p>一个 <strong>文件</strong> 是一个存储在磁盘中带有指定名称和目录路径的数据集合。当打开文件进行读写时，它变成一个 <strong>流</strong>。</p><p>从根本上说，流是通过通信路径传递的字节序列。有两个主要的流：<strong>输入流</strong> 和 <strong>输出流</strong>。<strong>输入流</strong>用于从文件读取数据（读操作），<strong>输出流</strong>用于向文件写入数据（写操作）。</p><h3 id="C-I-x2F-O-类"><a href="#C-I-x2F-O-类" class="headerlink" title="C# I&#x2F;O 类"></a>C# I&#x2F;O 类</h3><p>System.IO 命名空间有各种不同的类，用于执行各种文件操作，如创建和删除文件、读取或写入文件，关闭文件等。</p><p>下表列出了一些 System.IO 命名空间中常用的非抽象类：</p><table><thead><tr><th>I&#x2F;O 类</th><th>描述</th></tr></thead><tbody><tr><td>BinaryReader</td><td>从二进制流读取原始数据。</td></tr><tr><td>BinaryWriter</td><td>以二进制格式写入原始数据。</td></tr><tr><td>BufferedStream</td><td>字节流的临时存储。</td></tr><tr><td>Directory</td><td>有助于操作目录结构。</td></tr><tr><td>DirectoryInfo</td><td>用于对目录执行操作。</td></tr><tr><td>DriveInfo</td><td>提供驱动器的信息。</td></tr><tr><td>File</td><td>有助于处理文件。</td></tr><tr><td>FileInfo</td><td>用于对文件执行操作。</td></tr><tr><td>FileStream</td><td>用于文件中任何位置的读写。</td></tr><tr><td>MemoryStream</td><td>用于随机访问存储在内存中的数据流。</td></tr><tr><td>Path</td><td>对路径信息执行操作。</td></tr><tr><td>StreamReader</td><td>用于从字节流中读取字符。</td></tr><tr><td>StreamWriter</td><td>用于向一个流中写入字符。</td></tr><tr><td>StringReader</td><td>用于读取字符串缓冲区。</td></tr><tr><td>StringWriter</td><td>用于写入字符串缓冲区。</td></tr></tbody></table><h3 id="FileStream-类"><a href="#FileStream-类" class="headerlink" title="FileStream 类"></a>FileStream 类</h3><p>System.IO 命名空间中的 <strong>FileStream</strong> 类有助于文件的读写与关闭。该类派生自抽象类 Stream。</p><p>您需要创建一个 <strong>FileStream</strong> 对象来创建一个新的文件，或打开一个已有的文件。创建 <strong>FileStream</strong> 对象的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileStream &lt;object_name&gt; = <span class="keyword">new</span> FileStream( &lt;file_name&gt;,</span><br><span class="line">&lt;FileMode Enumerator&gt;, &lt;FileAccess Enumerator&gt;, &lt;FileShare Enumerator&gt;);</span><br></pre></td></tr></table></figure><p>例如，创建一个 FileStream 对象 <strong>F</strong> 来读取名为 <strong>sample.txt</strong> 的文件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileStream F = <span class="keyword">new</span> FileStream(<span class="string">&quot;sample.txt&quot;</span>, FileMode.Open, FileAccess.Read, FileShare.Read);</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>FileMode</td><td><strong>FileMode</strong> 枚举定义了各种打开文件的方法。FileMode 枚举的成员有： <strong>Append</strong>：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件。 <strong>Create</strong>：创建一个新的文件。如果文件已存在，则删除旧文件，然后创建新文件。 <strong>CreateNew</strong>：指定操作系统应创建一个新的文件。如果文件已存在，则抛出异常。 <strong>Open</strong>：打开一个已有的文件。如果文件不存在，则抛出异常。 <strong>OpenOrCreate</strong>：指定操作系统应打开一个已有的文件。如果文件不存在，则用指定的名称创建一个新的文件打开。 <strong>Truncate</strong>：打开一个已有的文件，文件一旦打开，就将被截断为零字节大小。然后我们可以向文件写入全新的数据，但是保留文件的初始创建日期。如果文件不存在，则抛出异常。</td></tr><tr><td>FileAccess</td><td><strong>FileAccess</strong> 枚举的成员有：<strong>Read</strong>、<strong>ReadWrite</strong> 和 <strong>Write</strong>。</td></tr><tr><td>FileShare</td><td><strong>FileShare</strong> 枚举的成员有： <strong>Inheritable</strong>：允许文件句柄可由子进程继承。Win32 不直接支持此功能。 <strong>None</strong>：谢绝共享当前文件。文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。  <strong>Read</strong>：允许随后打开文件读取。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。 <strong>ReadWrite</strong>：允许随后打开文件读取或写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。  <strong>Write</strong>：允许随后打开文件写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。  <strong>Delete</strong>：允许随后删除文件。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面的程序演示了 <strong>FileStream</strong> 类的用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FileIOApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            FileStream F = <span class="keyword">new</span> FileStream(<span class="string">&quot;test.dat&quot;</span>,</span><br><span class="line">            FileMode.OpenOrCreate, FileAccess.ReadWrite);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                F.WriteByte((<span class="built_in">byte</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            F.Position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(F.ReadByte() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            F.Close();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="C-高级文件操作"><a href="#C-高级文件操作" class="headerlink" title="C# 高级文件操作"></a>C# 高级文件操作</h2><p>上面的实例演示了 C# 中简单的文件操作。但是，要充分利用 C# System.IO 类的强大功能，您需要知道这些类常用的属性和方法。</p><p>在下面的章节中，我们将讨论这些类和它们执行的操作。请单击链接详细了解各个部分的知识：</p><table><thead><tr><th>主题</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/csharp/csharp-text-files.html">文本文件的读写</a></td><td>它涉及到文本文件的读写。<strong>StreamReader</strong> 和 <strong>StreamWriter</strong> 类有助于完成文本文件的读写。</td></tr><tr><td><a href="https://www.runoob.com/csharp/csharp-binary-files.html">二进制文件的读写</a></td><td>它涉及到二进制文件的读写。<strong>BinaryReader</strong> 和 <strong>BinaryWriter</strong> 类有助于完成二进制文件的读写。</td></tr><tr><td><a href="https://www.runoob.com/csharp/csharp-windows-file-system.html">Windows 文件系统的操作</a></td><td>它让 C# 程序员能够浏览并定位 Windows 文件和目录。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十七）——异常处理</title>
      <link href="/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="C-异常处理"><a href="#C-异常处理" class="headerlink" title="C# 异常处理"></a>C# 异常处理</h1><p>异常是在程序执行期间出现的问题。C# 中的异常是对程序运行时出现的特殊情况的一种响应，比如尝试除以零。</p><p>异常提供了一种把程序控制权从某个部分转移到另一个部分的方式。C# 异常处理时建立在四个关键词之上的：<strong>try</strong>、<strong>catch</strong>、<strong>finally</strong> 和 <strong>throw</strong>。</p><ul><li><strong>try</strong>：一个 try 块标识了一个将被激活的特定的异常的代码块。后跟一个或多个 catch 块。</li><li><strong>catch</strong>：程序通过异常处理程序捕获异常。catch 关键字表示异常的捕获。</li><li><strong>finally</strong>：finally 块用于执行给定的语句，不管异常是否被抛出都会执行。例如，如果您打开一个文件，不管是否出现异常文件都要被关闭。</li><li><strong>throw</strong>：当问题出现时，程序抛出一个异常。使用 throw 关键字来完成。</li></ul><h2 id="C-中的异常类"><a href="#C-中的异常类" class="headerlink" title="C# 中的异常类"></a>C# 中的异常类</h2><p>C# 异常是使用类来表示的。C# 中的异常类主要是直接或间接地派生于 <strong>System.Exception</strong> 类。<strong>System.ApplicationException</strong> 和 <strong>System.SystemException</strong> 类是派生于 System.Exception 类的异常类。</p><p><strong>System.ApplicationException</strong> 类支持由应用程序生成的异常。所以程序员定义的异常都应派生自该类。</p><p><strong>System.SystemException</strong> 类是所有预定义的系统异常的基类。</p><p>下表列出了一些派生自 System.SystemException 类的预定义的异常类：</p><table><thead><tr><th>异常类</th><th>描述</th></tr></thead><tbody><tr><td>System.IO.IOException</td><td>处理 I&#x2F;O 错误。</td></tr><tr><td>System.IndexOutOfRangeException</td><td>处理当方法指向超出范围的数组索引时生成的错误。</td></tr><tr><td>System.ArrayTypeMismatchException</td><td>处理当数组类型不匹配时生成的错误。</td></tr><tr><td>System.NullReferenceException</td><td>处理当依从一个空对象时生成的错误。</td></tr><tr><td>System.DivideByZeroException</td><td>处理当除以零时生成的错误。</td></tr><tr><td>System.InvalidCastException</td><td>处理在类型转换期间生成的错误。</td></tr><tr><td>System.OutOfMemoryException</td><td>处理空闲内存不足生成的错误。</td></tr><tr><td>System.StackOverflowException</td><td>处理栈溢出生成的错误。</td></tr></tbody></table><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>C# 以 try 和 catch 块的形式提供了一种结构化的异常处理方案。使用这些块，把核心程序语句与错误处理语句分离开。</p><p>这些错误处理块是使用 <strong>try</strong>、<strong>catch</strong> 和 <strong>finally</strong> 关键字实现的。下面是一个当除以零时抛出异常的实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ErrorHandlingApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DivNumbers</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> result;</span><br><span class="line">        DivNumbers()</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">division</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = num1 / num2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (DivideByZeroException e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Exception caught: &#123;0&#125;&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Result: &#123;0&#125;&quot;</span>, result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DivNumbers d = <span class="keyword">new</span> DivNumbers();</span><br><span class="line">            d.division(<span class="number">25</span>, <span class="number">0</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception caught: System.DivideByZeroException: Attempted to divide <span class="keyword">by</span> zero. </span><br><span class="line">at ...</span><br><span class="line">Result: <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="创建用户自定义异常"><a href="#创建用户自定义异常" class="headerlink" title="创建用户自定义异常"></a>创建用户自定义异常</h2><p>您也可以定义自己的异常。用户自定义的异常类是派生自 <strong>ApplicationException</strong> 类。下面的实例演示了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UserDefinedException</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">TestTemperature</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Temperature temp = <span class="keyword">new</span> Temperature();</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">            temp.showTemp();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span>(TempIsZeroException e)</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TempIsZeroException: &#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempIsZeroException</span>: <span class="title">ApplicationException</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TempIsZeroException</span>(<span class="params"><span class="built_in">string</span> message</span>): <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Temperature</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> temperature = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTemp</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(temperature == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">throw</span> (<span class="keyword">new</span> TempIsZeroException(<span class="string">&quot;Zero Temperature found&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Temperature: &#123;0&#125;&quot;</span>, temperature);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">TempIsZeroException:</span> Zero Temperature found</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十六）——命名空间</title>
      <link href="/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="C-命名空间（Namespace）"><a href="#C-命名空间（Namespace）" class="headerlink" title="C# 命名空间（Namespace）"></a>C# 命名空间（Namespace）</h1><p><strong>命名空间</strong>的设计目的是提供一种让一组名称与其他名称分隔开的方式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。</p><p>我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。</p><p><img src="/../images/CSharp%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.jpg" alt="C#命名空间"></p><h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h2><p>命名空间的定义是以关键字 <strong>namespace</strong> 开始，后跟命名空间的名称，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了调用支持命名空间版本的函数或变量，会把命名空间的名称置于前面，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namespace_name.item_name;</span><br></pre></td></tr></table></figure><p>下面的程序演示了命名空间的用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      first_space.namespace_cl fc = <span class="keyword">new</span> first_space.namespace_cl();</span><br><span class="line">      second_space.namespace_cl sc = <span class="keyword">new</span> second_space.namespace_cl();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Inside first_space</span><br><span class="line">Inside second_space</span><br></pre></td></tr></table></figure><h3 id="using-关键字"><a href="#using-关键字" class="headerlink" title="using 关键字"></a><em>using</em> 关键字</h3><p><strong>using</strong> 关键字表明程序使用的是给定命名空间中的名称。例如，我们在程序中使用 <strong>System</strong> 命名空间，其中定义了类 Console。我们可以只写：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine (<span class="string">&quot;Hello there&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们可以写完全限定名称，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">&quot;Hello there&quot;</span>);</span><br></pre></td></tr></table></figure><p>您也可以使用 <strong>using</strong> 命名空间指令，这样在使用的时候就不用在前面加上命名空间名称。该指令告诉编译器随后的代码使用了指定命名空间中的名称。下面的代码演示了命名空间的应用。</p><p>让我们使用 using 指定重写上面的实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> first_space;</span><br><span class="line"><span class="keyword">using</span> second_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">abc</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">efg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      abc fc = <span class="keyword">new</span> abc();</span><br><span class="line">      efg sc = <span class="keyword">new</span> efg();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Inside first_space</span><br><span class="line">Inside second_space</span><br></pre></td></tr></table></figure><h3 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h3><p>命名空间可以被嵌套，即您可以在一个命名空间内定义另一个命名空间，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name1</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">   <span class="keyword">namespace</span> <span class="title">namespace_name2</span> </span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">// 代码声明</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以使用点（.）运算符访问嵌套的命名空间的成员，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace.Nested;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SomeNameSpace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;In SomeNameSpace&quot;</span>);</span><br><span class="line">            Nested.NestedNameSpaceClass.SayHello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内嵌命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Nested</span>  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NestedNameSpaceClass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;In Nested&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In SomeNameSpace</span><br><span class="line">In Nested</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十五）——接口</title>
      <link href="/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3/"/>
      <url>/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="C-接口（Interface）"><a href="#C-接口（Interface）" class="headerlink" title="C# 接口（Interface）"></a>C# 接口（Interface）</h1><p>接口定义了所有类继承接口时应遵循的语法合同。</p><p>接口定义了语法合同 <strong>“是什么”</strong> 部分，派生类定义了语法合同 <strong>“怎么做”</strong> 部分。</p><p><strong>接口定义了属性、方法和事件，这些都是接口的成员</strong>。</p><p><em><strong>接口只包含了成员的声明。成员的定义是派生类的责任</strong></em>。</p><p>接口提供了派生类应遵循的标准结构。</p><p>接口使得实现接口的类或结构在形式上保持一致。</p><p>抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。</p><p><em><strong>接口本身并不实现任何功能</strong></em>，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约。</p><p><em><strong>抽象类不能直接实例化，但允许派生出具体的，具有实际功能的类</strong></em>。</p><h3 id="总而言之：接口是一个规范，声明了派生类可以继承的所有成员（属性，方法，事件），但是具体实现，需要派生类继承后实例化，并具体定义成员的使用方法。"><a href="#总而言之：接口是一个规范，声明了派生类可以继承的所有成员（属性，方法，事件），但是具体实现，需要派生类继承后实例化，并具体定义成员的使用方法。" class="headerlink" title="总而言之：接口是一个规范，声明了派生类可以继承的所有成员（属性，方法，事件），但是具体实现，需要派生类继承后实例化，并具体定义成员的使用方法。"></a>总而言之：接口是一个规范，声明了派生类可以继承的所有成员（属性，方法，事件），但是具体实现，需要派生类继承后实例化，并具体定义成员的使用方法。</h3><h3 id="定义接口-MyInterface-cs"><a href="#定义接口-MyInterface-cs" class="headerlink" title="定义接口: MyInterface.cs"></a>定义接口: MyInterface.cs</h3><p>接口使用 <strong>interface</strong> 关键字声明，它与类的声明类似。接口声明默认是 public 的。下面是一个接口声明的实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码定义了接口 IMyInterface。通常接口命令以 I 字母开头，这个接口只有一个方法 MethodToImplement()，没有参数和返回值，当然我们可以按照需求设置参数和返回值。</p><p>值得注意的是，该方法并没有具体的实现。</p><h3 id="接下来我们来实现以上接口：InterfaceImplementer-cs"><a href="#接下来我们来实现以上接口：InterfaceImplementer-cs" class="headerlink" title="接下来我们来实现以上接口：InterfaceImplementer.cs"></a>接下来我们来实现以上接口：InterfaceImplementer.cs</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 接口成员</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">InterfaceImplementer</span> : <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InterfaceImplementer iImp = <span class="keyword">new</span> InterfaceImplementer();</span><br><span class="line">        iImp.MethodToImplement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MethodToImplement() called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InterfaceImplementer 类实现了 IMyInterface 接口，接口的实现与类的继承语法格式类似：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">InterfaceImplementer</span> : <span class="title">IMyInterface</span></span><br></pre></td></tr></table></figure><p>继承接口后，我们需要实现接口的方法 MethodToImplement() , 方法名必须与接口定义的方法名一致。</p><h3 id="接口继承-InterfaceInheritance-cs"><a href="#接口继承-InterfaceInheritance-cs" class="headerlink" title="接口继承: InterfaceInheritance.cs"></a>接口继承: InterfaceInheritance.cs</h3><p>以下实例定义了两个接口 IMyInterface 和 IParentInterface。</p><p>如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员。</p><p>以下实例 IMyInterface 继承了 IParentInterface 接口，因此接口实现类必须实现 MethodToImplement()  和 ParentInterfaceMethod() 方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IParentInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span> : <span class="title">IParentInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">InterfaceImplementer</span> : <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InterfaceImplementer iImp = <span class="keyword">new</span> InterfaceImplementer();</span><br><span class="line">        iImp.MethodToImplement();</span><br><span class="line">        iImp.ParentInterfaceMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MethodToImplement() called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ParentInterfaceMethod() called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例输出结果为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MethodToImplement() called.</span><br><span class="line">ParentInterfaceMethod() called.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十四）——运算符重载</title>
      <link href="/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>/2023/01/25/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="C-运算符重载"><a href="#C-运算符重载" class="headerlink" title="C# 运算符重载"></a>C# 运算符重载</h1><p>您可以重定义或重载 C# 中内置的运算符。因此，程序员也可以使用用户自定义类型的运算符。重载运算符是具有特殊名称的函数，是通过关键字 <strong>operator</strong> 后跟运算符的符号来定义的。与其他函数一样，重载运算符有返回类型和参数列表。</p><p><em><strong>总而言之，运算符重载赋予了同一个类的不同实例之间的属性比较的能力！！！</strong></em></p><p>例如，请看下面的函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span>+ (Box b, Box c)</span><br><span class="line">&#123;</span><br><span class="line">   Box box = <span class="keyword">new</span> Box();</span><br><span class="line">   box.length = b.length + c.length;</span><br><span class="line">   box.breadth = b.breadth + c.breadth;</span><br><span class="line">   box.height = b.height + c.height;</span><br><span class="line">   <span class="keyword">return</span> box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数为用户自定义的类 Box 实现了加法运算符（+）。它把两个 Box 对象的属性相加，并返回相加后的 Box 对象。</p><h3 id="运算符重载的实现"><a href="#运算符重载的实现" class="headerlink" title="运算符重载的实现"></a>运算符重载的实现</h3><p>下面的程序演示了完整的实现：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OperatorOvlApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getVolume</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"> <span class="built_in">double</span> len </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = len;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBreadth</span>(<span class="params"> <span class="built_in">double</span> bre </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         breadth = bre;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"> <span class="built_in">double</span> hei </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         height = hei;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载 + 运算符来把两个 Box 对象相加</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span>+ (Box b, Box c)</span><br><span class="line">      &#123;</span><br><span class="line">         Box box = <span class="keyword">new</span> Box();</span><br><span class="line">         box.length = b.length + c.length;</span><br><span class="line">         box.breadth = b.breadth + c.breadth;</span><br><span class="line">         box.height = b.height + c.height;</span><br><span class="line">         <span class="keyword">return</span> box;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Box Box1 = <span class="keyword">new</span> Box();         <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">         Box Box2 = <span class="keyword">new</span> Box();         <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">         Box Box3 = <span class="keyword">new</span> Box();         <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">         <span class="built_in">double</span> volume = <span class="number">0.0</span>;          <span class="comment">// 体积</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// Box1 详述</span></span><br><span class="line">         Box1.setLength(<span class="number">6.0</span>);</span><br><span class="line">         Box1.setBreadth(<span class="number">7.0</span>);</span><br><span class="line">         Box1.setHeight(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Box2 详述</span></span><br><span class="line">         Box2.setLength(<span class="number">12.0</span>);</span><br><span class="line">         Box2.setBreadth(<span class="number">13.0</span>);</span><br><span class="line">         Box2.setHeight(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Box1 的体积</span></span><br><span class="line">         volume = Box1.getVolume();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Box1 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Box2 的体积</span></span><br><span class="line">         volume = Box2.getVolume();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Box2 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 把两个对象相加</span></span><br><span class="line">         Box3 = Box1 + Box2;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Box3 的体积</span></span><br><span class="line">         volume = Box3.getVolume();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Box3 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Box1 的体积： <span class="number">210</span></span><br><span class="line">Box2 的体积： <span class="number">1560</span></span><br><span class="line">Box3 的体积： <span class="number">5400</span></span><br></pre></td></tr></table></figure><h2 id="可重载和不可重载运算符"><a href="#可重载和不可重载运算符" class="headerlink" title="可重载和不可重载运算符"></a>可重载和不可重载运算符</h2><p>下表描述了 C# 中运算符重载的能力：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+, -, !, ~, ++, –</td><td>这些一元运算符只有一个操作数，且可以被重载。</td></tr><tr><td>+, -, *, &#x2F;, %</td><td>这些二元运算符带有两个操作数，且可以被重载。</td></tr><tr><td>&#x3D;&#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;</td><td>这些比较运算符可以被重载。</td></tr><tr><td>&amp;&amp;, ||</td><td>这些条件逻辑运算符不能被直接重载。</td></tr><tr><td>+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;</td><td>这些赋值运算符不能被重载。</td></tr><tr><td>&#x3D;, ., ?:, -&gt;, new, is, sizeof, typeof</td><td>这些运算符不能被重载。</td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>针对上述讨论，让我们扩展上面的实例，重载更多的运算符：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OperatorOvlApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">       <span class="keyword">private</span> <span class="built_in">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line">     </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getVolume</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"> <span class="built_in">double</span> len </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          length = len;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBreadth</span>(<span class="params"> <span class="built_in">double</span> bre </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          breadth = bre;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"> <span class="built_in">double</span> hei </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          height = hei;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载 + 运算符来把两个 Box 对象相加</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span>+ (Box b, Box c)</span><br><span class="line">      &#123;</span><br><span class="line">          Box box = <span class="keyword">new</span> Box();</span><br><span class="line">          box.length = b.length + c.length;</span><br><span class="line">          box.breadth = b.breadth + c.breadth;</span><br><span class="line">          box.height = b.height + c.height;</span><br><span class="line">          <span class="keyword">return</span> box;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> == (Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length == rhs.length &amp;&amp; lhs.height == rhs.height</span><br><span class="line">             &amp;&amp; lhs.breadth == rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> !=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length != rhs.length || lhs.height != rhs.height</span><br><span class="line">              || lhs.breadth != rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &lt;(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &lt; rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &lt; rhs.height &amp;&amp; lhs.breadth &lt; rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &gt; rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &gt; rhs.height &amp;&amp; lhs.breadth &gt; rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &lt;=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &lt;= rhs.length &amp;&amp; lhs.height</span><br><span class="line">              &lt;= rhs.height &amp;&amp; lhs.breadth &lt;= rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;=(Box lhs, Box rhs)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (lhs.length &gt;= rhs.length &amp;&amp; lhs.height</span><br><span class="line">             &gt;= rhs.height &amp;&amp; lhs.breadth &gt;= rhs.breadth)</span><br><span class="line">          &#123;</span><br><span class="line">              status = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> String.Format(<span class="string">&quot;(&#123;0&#125;, &#123;1&#125;, &#123;2&#125;)&quot;</span>, length, breadth, height);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">        Box Box1 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">        Box Box2 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">        Box Box3 = <span class="keyword">new</span> Box();          <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">        Box Box4 = <span class="keyword">new</span> Box();</span><br><span class="line">        <span class="built_in">double</span> volume = <span class="number">0.0</span>;   <span class="comment">// 体积</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box1 详述</span></span><br><span class="line">        Box1.setLength(<span class="number">6.0</span>);</span><br><span class="line">        Box1.setBreadth(<span class="number">7.0</span>);</span><br><span class="line">        Box1.setHeight(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box2 详述</span></span><br><span class="line">        Box2.setLength(<span class="number">12.0</span>);</span><br><span class="line">        Box2.setBreadth(<span class="number">13.0</span>);</span><br><span class="line">        Box2.setHeight(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用重载的 ToString() 显示两个盒子</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box1： &#123;0&#125;&quot;</span>, Box1.ToString());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box2： &#123;0&#125;&quot;</span>, Box2.ToString());</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// Box1 的体积</span></span><br><span class="line">        volume = Box1.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box1 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box2 的体积</span></span><br><span class="line">        volume = Box2.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box2 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把两个对象相加</span></span><br><span class="line">        Box3 = Box1 + Box2;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box3： &#123;0&#125;&quot;</span>, Box3.ToString());</span><br><span class="line">        <span class="comment">// Box3 的体积</span></span><br><span class="line">        volume = Box3.getVolume();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Box3 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//comparing the boxes</span></span><br><span class="line">        <span class="keyword">if</span> (Box1 &gt; Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 大于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不大于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &lt; Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 小于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不小于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &gt;= Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 大于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不大于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 &lt;= Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 小于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不小于等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Box1 != Box2)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 不等于 Box2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box1 等于 Box2&quot;</span>);</span><br><span class="line">        Box4 = Box3;</span><br><span class="line">        <span class="keyword">if</span> (Box3 == Box4)</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box3 等于 Box4&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Console.WriteLine(<span class="string">&quot;Box3 不等于 Box4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Box1： (<span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>)</span><br><span class="line">Box2： (<span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>)</span><br><span class="line">Box1 的体积： <span class="number">210</span></span><br><span class="line">Box2 的体积： <span class="number">1560</span></span><br><span class="line">Box3： (<span class="number">18</span>, <span class="number">20</span>, <span class="number">15</span>)</span><br><span class="line">Box3 的体积： <span class="number">5400</span></span><br><span class="line">Box1 不大于 Box2</span><br><span class="line">Box1 小于 Box2</span><br><span class="line">Box1 不大于等于 Box2</span><br><span class="line">Box1 小于等于 Box2</span><br><span class="line">Box1 不等于 Box2</span><br><span class="line">Box3 等于 Box4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十三）——多态性</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%A4%9A%E6%80%81%E6%80%A7/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%A4%9A%E6%80%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="C-多态性"><a href="#C-多态性" class="headerlink" title="C# 多态性"></a>C# 多态性</h1><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p><p><strong>多态性</strong>意味着有多重形式。在面向对象编程范式中，多态性往往表现为”一个接口，多个功能”。</p><p>多态性可以是静态的或动态的。在<strong>静态多态性</strong>中，函数的响应是在编译时发生的。在<strong>动态多态性</strong>中，函数的响应是在运行时发生的。</p><p>在 C# 中，每个类型都是多态的，因为包括用户定义类型在内的所有类型都继承自 Object。</p><p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p><p><img src="/../images/%E5%A4%9A%E6%80%81.png" alt="多态示意图"></p><blockquote><p>现实中，比如我们按下 F1 键这个动作：</p><ul><li>如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；</li><li>如果当前在 Word 下弹出的就是 Word 帮助；</li><li>在 Windows 下弹出的就是 Windows 帮助和支持。</li></ul><p>同一个事件发生在不同的对象上会产生不同的结果。</p></blockquote><h3 id="静态多态性"><a href="#静态多态性" class="headerlink" title="静态多态性"></a>静态多态性</h3><p>在编译时，函数和对象的连接机制被称为早期绑定，也被称为静态绑定。C# 提供了两种技术来实现静态多态性。分别为：</p><ul><li>函数重载</li><li>运算符重载</li></ul><p>运算符重载将在下一章节讨论，接下来我们将讨论函数重载。</p><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>您可以在同一个范围内对相同的函数名有多个定义。<em><strong>函数的定义必须彼此不同，可以是参数列表中的参数类型不同，也可以是参数个数不同。不能重载只有返回类型不同的函数声明。</strong></em></p><p>下面的实例演示了几个相同的函数 **Add()**，用于对不同个数参数进行相加处理：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorphismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestData</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> c</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">return</span> a + b + c;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">return</span> a + b;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            TestData dataClass = <span class="keyword">new</span> TestData();</span><br><span class="line">            <span class="built_in">int</span> add1 = dataClass.Add(<span class="number">1</span>, <span class="number">2</span>);  </span><br><span class="line">            <span class="built_in">int</span> add2 = dataClass.Add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;add1 :&#123;0&#125;&quot;</span>,add1);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;add2 :&#123;0&#125;&quot;</span>,add2);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的实例演示了几个相同的函数 **print()**，用于打印不同的数据类型：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorphismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Printdata</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">print</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;输出整型: &#123;0&#125;&quot;</span>, i );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">print</span>(<span class="params"><span class="built_in">double</span> f</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;输出浮点型: &#123;0&#125;&quot;</span> , f);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">print</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;输出字符串: &#123;0&#125;&quot;</span>, s);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Printdata p = <span class="keyword">new</span> Printdata();</span><br><span class="line">         <span class="comment">// 调用 print 来打印整数</span></span><br><span class="line">         p.print(<span class="number">1</span>);</span><br><span class="line">         <span class="comment">// 调用 print 来打印浮点数</span></span><br><span class="line">         p.print(<span class="number">1.23</span>);</span><br><span class="line">         <span class="comment">// 调用 print 来打印字符串</span></span><br><span class="line">         p.print(<span class="string">&quot;Hello Runoob&quot;</span>);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出整型: <span class="number">1</span></span><br><span class="line">输出浮点型: <span class="number">1.23</span></span><br><span class="line">输出字符串: Hello Runoob</span><br></pre></td></tr></table></figure><h3 id="动态多态性"><a href="#动态多态性" class="headerlink" title="动态多态性"></a>动态多态性</h3><p>C# 允许您使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p><p>请注意，下面是有关抽象类的一些规则：</p><ul><li>您不能创建一个抽象类的实例。</li><li>您不能在一个抽象类外部声明一个抽象方法。</li><li>通过在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</li></ul><p>下面的程序演示了一个抽象类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorphismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="built_in">int</span> <span class="title">area</span>()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>:  <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> length;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = a;</span><br><span class="line">         width = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> ()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * length);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         <span class="built_in">double</span> a = r.area();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>,a);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Rectangle</span> 类的面积：</span><br><span class="line">面积： <span class="number">70</span></span><br></pre></td></tr></table></figure><p><strong>当有一个定义在类中的函数需要在继承类中实现时，可以使用虚方法。</strong></p><p>虚方法是使用关键字 <strong>virtual</strong> 声明的。</p><p>虚方法可以在不同的继承类中有不同的实现。</p><p>对虚方法的调用是在运行时发生的。</p><p>动态多态性是通过 <strong>抽象类</strong> 和 <strong>虚方法</strong> 实现的。</p><p>以下实例创建了 Shape 基类，并创建派生类 Circle、 Rectangle、Triangle， Shape 类提供一个名为 Draw 的虚拟方法，在每个派生类中重写该方法以绘制该类的指定形状。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 虚方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行基类的画图任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个圆形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个长方形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Triangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个三角形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个 List&lt;Shape&gt; 对象，并向该对象添加 Circle、Triangle 和 Rectangle</span></span><br><span class="line">        <span class="keyword">var</span> shapes = <span class="keyword">new</span> List&lt;Shape&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Rectangle(),</span><br><span class="line">            <span class="keyword">new</span> Triangle(),</span><br><span class="line">            <span class="keyword">new</span> Circle()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 foreach 循环对该列表的派生类进行循环访问，并对其中的每个 Shape 对象调用 Draw 方法</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> shape <span class="keyword">in</span> shapes)</span><br><span class="line">        &#123;</span><br><span class="line">            shape.Draw();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;按下任意键退出。&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">画一个长方形</span><br><span class="line">执行基类的画图任务</span><br><span class="line">画一个三角形</span><br><span class="line">执行基类的画图任务</span><br><span class="line">画一个圆形</span><br><span class="line">执行基类的画图任务</span><br><span class="line">按下任意键退出。</span><br></pre></td></tr></table></figure><p>下面的程序演示通过虚方法 area() 来计算不同形状图像的面积：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorphismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width, height;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">area</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;父类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>): <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> ()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Triangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span>(<span class="params"><span class="built_in">int</span> a = <span class="number">0</span>, <span class="built_in">int</span> b = <span class="number">0</span></span>): <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">     </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Triangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * height / <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Caller</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallArea</span>(<span class="params">Shape sh</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> a;</span><br><span class="line">         a = sh.area();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>, a);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">   &#123;</span><br><span class="line">     </span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Caller c = <span class="keyword">new</span> Caller();</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         Triangle t = <span class="keyword">new</span> Triangle(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">         c.CallArea(r);</span><br><span class="line">         c.CallArea(t);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rectangle 类的面积：</span><br><span class="line">面积：<span class="number">70</span></span><br><span class="line">Triangle 类的面积：</span><br><span class="line">面积：<span class="number">25</span></span><br></pre></td></tr></table></figure><p><strong>重点理解最后两个例子！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十二）——继承</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="C-继承"><a href="#C-继承" class="headerlink" title="C# 继承"></a>C# 继承</h1><p>继承是面向对象程序设计中最重要的概念之一。继承允许我们根据一个类来定义另一个类，这使得创建和维护应用程序变得更容易。同时也有利于重用代码和节省开发时间。</p><p><em><strong>当创建一个类时，程序员不需要完全重新编写新的数据成员和成员函数，只需要设计一个新的类，继承了已有的类的成员即可。</strong></em>这个已有的类被称为的<strong>基类</strong>，这个新的类被称为<strong>派生类</strong>。</p><h3 id="基类和派生类"><a href="#基类和派生类" class="headerlink" title="基类和派生类"></a>基类和派生类</h3><p>一个类可以派生自多个类或接口，这意味着它可以从多个基类或接口继承数据和函数。</p><p>C# 中创建派生类的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;访问修饰符&gt; <span class="keyword">class</span> &lt;基类&gt;</span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> &lt;派生类&gt; : &lt;基类&gt;</span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设，有一个基类 Shape，它的派生类是 Rectangle：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">InheritanceApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span>(<span class="params"><span class="built_in">int</span> w</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"><span class="built_in">int</span> h</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> height;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 派生类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getArea</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle Rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line">         Rect.setWidth(<span class="number">5</span>);</span><br><span class="line">         Rect.setHeight(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 打印对象的面积</span></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;总面积： &#123;0&#125;&quot;</span>,  Rect.getArea());</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总面积： <span class="number">35</span></span><br></pre></td></tr></table></figure><h3 id="基类的初始化"><a href="#基类的初始化" class="headerlink" title="基类的初始化"></a>基类的初始化</h3><p>派生类继承了基类的成员变量和成员方法。因此父类对象应在子类对象创建之前被创建。您可以在成员初始化列表中进行父类的初始化。</p><p>下面的程序演示了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RectangleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 成员变量</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">double</span> length;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">double</span> width;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="built_in">double</span> l, <span class="built_in">double</span> w</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = l;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> length * width;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;长度： &#123;0&#125;&quot;</span>, length);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;宽度： &#123;0&#125;&quot;</span>, width);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="comment">//end class Rectangle  </span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tabletop</span> : <span class="title">Rectangle</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> cost;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Tabletop</span>(<span class="params"><span class="built_in">double</span> l, <span class="built_in">double</span> w</span>) : <span class="title">base</span>(<span class="params">l, w</span>)</span></span><br><span class="line">      &#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetCost</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">double</span> cost;</span><br><span class="line">         cost = GetArea() * <span class="number">70</span>;</span><br><span class="line">         <span class="keyword">return</span> cost;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">base</span>.Display();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;成本： &#123;0&#125;&quot;</span>, GetCost());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Tabletop t = <span class="keyword">new</span> Tabletop(<span class="number">4.5</span>, <span class="number">7.5</span>);</span><br><span class="line">         t.Display();</span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">长度： <span class="number">4.5</span></span><br><span class="line">宽度： <span class="number">7.5</span></span><br><span class="line">面积： <span class="number">33.75</span></span><br><span class="line">成本： <span class="number">2362.5</span></span><br></pre></td></tr></table></figure><h3 id="C-多重继承"><a href="#C-多重继承" class="headerlink" title="C# 多重继承"></a>C# 多重继承</h3><p>多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。</p><p><strong>C# 不支持多重继承</strong>。但是，您可以使用接口来实现多重继承。下面的程序演示了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">InheritanceApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span>(<span class="params"><span class="built_in">int</span> w</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"><span class="built_in">int</span> h</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> height;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 基类 PaintCost</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">PaintCost</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="built_in">int</span> <span class="title">getCost</span>(<span class="params"><span class="built_in">int</span> area</span>)</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 派生类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span>, <span class="title">PaintCost</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getArea</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getCost</span>(<span class="params"><span class="built_in">int</span> area</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> area * <span class="number">70</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle Rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line">         <span class="built_in">int</span> area;</span><br><span class="line">         Rect.setWidth(<span class="number">5</span>);</span><br><span class="line">         Rect.setHeight(<span class="number">7</span>);</span><br><span class="line">         area = Rect.getArea();</span><br><span class="line">         <span class="comment">// 打印对象的面积</span></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;总面积： &#123;0&#125;&quot;</span>,  Rect.getArea());</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;油漆总成本： $&#123;0&#125;&quot;</span> , Rect.getCost(area));</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">总面积： <span class="number">35</span></span><br><span class="line">油漆总成本： $<span class="number">2450</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十一）——类</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>类的定义是以关键字 <strong>class</strong> 开始，后跟类的名称。类的主体，包含在一对花括号内。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;access specifier&gt; <span class="keyword">class</span>  <span class="title">class_name</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// member variables</span></span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variable1;</span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variable2;</span><br><span class="line">    ...</span><br><span class="line">    &lt;access specifier&gt; &lt;data type&gt; variableN;</span><br><span class="line">    <span class="comment">// member methods</span></span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; method1(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; method2(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &lt;access specifier&gt; &lt;<span class="keyword">return</span> type&gt; methodN(parameter_list)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意：</p><ul><li>访问标识符 <access specifier> 指定了对类及其成员的访问规则。如果没有指定，则使用默认的访问标识符。类的默认访问标识符是 <strong>internal</strong>，成员的默认访问标识符是 <strong>private</strong>。</li><li>数据类型 <data type> 指定了变量的类型，返回类型 <return type> 指定了返回的方法返回的数据类型。</li><li>如果要访问类的成员，你要使用点（.）运算符。</li><li>点运算符链接了对象的名称和成员的名称。</li></ul><p>下面的实例说明了目前为止所讨论的概念：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BoxApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">double</span> length;   <span class="comment">// 长度</span></span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">double</span> breadth;  <span class="comment">// 宽度</span></span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">double</span> height;   <span class="comment">// 高度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Boxtester</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Box Box1 = <span class="keyword">new</span> Box();        <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">            Box Box2 = <span class="keyword">new</span> Box();        <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">            <span class="built_in">double</span> volume = <span class="number">0.0</span>;         <span class="comment">// 体积</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Box1 详述</span></span><br><span class="line">            Box1.height = <span class="number">5.0</span>;</span><br><span class="line">            Box1.length = <span class="number">6.0</span>;</span><br><span class="line">            Box1.breadth = <span class="number">7.0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Box2 详述</span></span><br><span class="line">            Box2.height = <span class="number">10.0</span>;</span><br><span class="line">            Box2.length = <span class="number">12.0</span>;</span><br><span class="line">            Box2.breadth = <span class="number">13.0</span>;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">// Box1 的体积</span></span><br><span class="line">            volume = Box1.height * Box1.length * Box1.breadth;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Box1 的体积： &#123;0&#125;&quot;</span>,  volume);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Box2 的体积</span></span><br><span class="line">            volume = Box2.height * Box2.length * Box2.breadth;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Box2 的体积： &#123;0&#125;&quot;</span>, volume);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box1 的体积： <span class="number">210</span></span><br><span class="line">Box2 的体积： <span class="number">1560</span></span><br></pre></td></tr></table></figure><h2 id="C-中的构造函数"><a href="#C-中的构造函数" class="headerlink" title="C# 中的构造函数"></a>C# 中的构造函数</h2><p>类的构造函数是类的一个特殊的成员函数，<em><strong>当创建类的新对象时执行。</strong></em></p><p><strong>构造函数的名称与类的名称完全相同，它没有任何返回类型。</strong></p><p>下面的实例说明了构造函数的概念：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LineApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Line</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> length;   <span class="comment">// 线条的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Line</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;对象已创建&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"> <span class="built_in">double</span> len </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = len;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getLength</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> length;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Line line = <span class="keyword">new</span> Line();    </span><br><span class="line">         <span class="comment">// 设置线条长度</span></span><br><span class="line">         line.setLength(<span class="number">6.0</span>);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;线条的长度： &#123;0&#125;&quot;</span>, line.getLength());</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象已创建</span><br><span class="line">线条的长度： 6</span><br></pre></td></tr></table></figure><p><strong>默认的构造函数</strong>没有任何参数。但是如果你需要一个带有参数的构造函数可以有参数，这种构造函数叫做<strong>参数化构造函数</strong>。这种技术可以帮助你在创建对象的同时给对象赋初始值，具体请看下面实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LineApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Line</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> length;   <span class="comment">// 线条的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params"><span class="built_in">double</span> len</span>)  <span class="comment">// 参数化构造函数</span></span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;对象已创建，length = &#123;0&#125;&quot;</span>, len);</span><br><span class="line">         length = len;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"> <span class="built_in">double</span> len </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = len;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getLength</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> length;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Line line = <span class="keyword">new</span> Line(<span class="number">10.0</span>);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;线条的长度： &#123;0&#125;&quot;</span>, line.getLength());</span><br><span class="line">         <span class="comment">// 设置线条长度</span></span><br><span class="line">         line.setLength(<span class="number">6.0</span>);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;线条的长度： &#123;0&#125;&quot;</span>, line.getLength());</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象已创建，length <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">线条的长度： <span class="number">10</span></span><br><span class="line">线条的长度： <span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="C-中的析构函数"><a href="#C-中的析构函数" class="headerlink" title="C# 中的析构函数"></a>C# 中的析构函数</h2><p>类的 <strong>析构函数</strong> 是类的一个特殊的成员函数，当类的对象超出范围时执行。</p><p>析构函数的名称是在类的名称前加上一个波浪形（~）作为前缀，它不返回值，也不带任何参数。</p><p>析构函数用于在结束程序（比如关闭文件、释放内存等）之前释放资源。析构函数不能继承或重载。</p><p>下面的实例说明了析构函数的概念：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LineApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Line</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> length;   <span class="comment">// 线条的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Line</span>()  <span class="comment">// 构造函数</span></span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;对象已创建&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ~Line() <span class="comment">//析构函数</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;对象已删除&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"> <span class="built_in">double</span> len </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = len;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getLength</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> length;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Line line = <span class="keyword">new</span> Line();</span><br><span class="line">         <span class="comment">// 设置线条长度</span></span><br><span class="line">         line.setLength(<span class="number">6.0</span>);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;线条的长度： &#123;0&#125;&quot;</span>, line.getLength());          </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象已创建</span><br><span class="line">线条的长度： <span class="number">6</span></span><br><span class="line">对象已删除</span><br></pre></td></tr></table></figure><h2 id="C-类的静态成员"><a href="#C-类的静态成员" class="headerlink" title="C# 类的静态成员"></a>C# 类的静态成员</h2><p>我们可以使用 <strong>static</strong> 关键字把类成员定义为静态的。<strong>当我们声明一个类成员为静态时，意味着无论有多少个类的对象被创建，只会有一个该静态成员的副本。</strong></p><p>关键字 <strong>static</strong> 意味着类中只有一个该成员的实例。静态变量用于定义常量，因为它们的值可以通过直接调用类而不需要创建类的实例来获取。静态变量可在成员函数或类的定义外部进行初始化。你也可以在类的定义内部初始化静态变量。</p><p>下面的实例演示了<strong>静态变量</strong>的用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StaticVarApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticVar</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> num;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticTester</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StaticVar s1 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            StaticVar s2 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            s1.count();</span><br><span class="line">            s1.count();</span><br><span class="line">            s1.count();</span><br><span class="line">            s2.count();</span><br><span class="line">            s2.count();</span><br><span class="line">            s2.count();        </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;s1 的变量 num： &#123;0&#125;&quot;</span>, s1.getNum());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;s2 的变量 num： &#123;0&#125;&quot;</span>, s2.getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 的变量 num： <span class="number">6</span></span><br><span class="line">s2 的变量 num： <span class="number">6</span></span><br></pre></td></tr></table></figure><p>上例说明：</p><ol><li><em><strong>静态变量只要在类中定义就已存在，无需实例化对象即可访问引用。</strong></em></li><li><em><strong>无论实例化多少对象，静态变量只有一个，操作共享。</strong></em></li></ol><p>你也可以把一个<strong>成员函数</strong>声明为 <strong>static</strong>。<em><strong>这样的函数只能访问静态变量。静态函数在对象被创建之前就已经存在</strong></em>。下面的实例演示了<strong>静态函数</strong>的用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StaticVarApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticVar</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> num;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticTester</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StaticVar s = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            s.count();</span><br><span class="line">            s.count();</span><br><span class="line">            s.count();                  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;变量 num： &#123;0&#125;&quot;</span>, StaticVar.getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 <span class="built_in">num</span>： <span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（十）——枚举</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94%E6%9E%9A%E4%B8%BE/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<p>枚举是一组命名整型常量。枚举类型是使用 <strong>enum</strong> 关键字声明的。</p><p>C# 枚举是值类型。换句话说，枚举包含自己的值，且不能继承或传递继承。</p><h2 id="声明-enum-变量"><a href="#声明-enum-变量" class="headerlink" title="声明 enum 变量"></a>声明 <em>enum</em> 变量</h2><p>声明枚举的一般语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> &lt;enum_name&gt;</span><br><span class="line">&#123; </span><br><span class="line">    enumeration list </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><em>enum_name</em> 指定枚举的类型名称。</li><li><em>enumeration list</em> 是一个用逗号分隔的标识符列表。</li></ul><p>枚举列表中的每个符号代表一个整数值，一个比它前面的符号大的整数值。默认情况下，第一个枚举符号的值是 0。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Days &#123; Sun, Mon, tue, Wed, thu, Fri, Sat &#125;;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面的实例演示了枚举变量的用法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Day</span> &#123; Sun, Mon, Tue, Wed, Thu, Fri, Sat &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = (<span class="type">int</span>)Day.Sun;</span><br><span class="line">        <span class="type">int</span> y = (<span class="type">int</span>)Day.Fri;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;Sun = &#123;0&#125;&quot;</span>, x);</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;Fri = &#123;0&#125;&quot;</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Sun</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">Fri</span> <span class="operator">=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>和结构体一样，与C语言不同的是，C语言的枚举仍然是作为关键字，在声明（实例化）的时候依然是以（ enum 枚举名 {枚举元素1，枚举元素2，·······} ）作为关键字声明变量，例如：enum book book1;</p><p>而C#中是把enum当成类，定义即声明，即（ enum 枚举名 {枚举元素1，枚举元素2，·······} ）此时就已经实例化了，枚举名就是对象，如要选取枚举中的枚举元素，只要对象.枚举元素就可以取出。例如：enum Day { Sun, Mon, Tue, Wed, Thu, Fri, Sat };取出元素：Day.Sun</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（九）——结构体</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h2><p>为了定义一个结构体，您必须使用 struct 语句。struct 语句为程序定义了一个带有多个成员的新的数据类型。</p><p>例如，您可以按照如下的方式声明 Book 结构：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Books</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> author;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> book_id;</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><p>下面的程序演示了结构的用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">struct</span> Books</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> author;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> book_id;</span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">testStructure</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      Books Book1;        <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br><span class="line">      Books Book2;        <span class="comment">/* 声明 Book2，类型为 Books */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* book 1 详述 */</span></span><br><span class="line">      Book1.title = <span class="string">&quot;C Programming&quot;</span>;</span><br><span class="line">      Book1.author = <span class="string">&quot;Nuha Ali&quot;</span>;</span><br><span class="line">      Book1.subject = <span class="string">&quot;C Programming Tutorial&quot;</span>;</span><br><span class="line">      Book1.book_id = <span class="number">6495407</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* book 2 详述 */</span></span><br><span class="line">      Book2.title = <span class="string">&quot;Telecom Billing&quot;</span>;</span><br><span class="line">      Book2.author = <span class="string">&quot;Zara Ali&quot;</span>;</span><br><span class="line">      Book2.subject =  <span class="string">&quot;Telecom Billing Tutorial&quot;</span>;</span><br><span class="line">      Book2.book_id = <span class="number">6495700</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 打印 Book1 信息 */</span></span><br><span class="line">      Console.WriteLine( <span class="string">&quot;Book 1 title : &#123;0&#125;&quot;</span>, Book1.title);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book 1 author : &#123;0&#125;&quot;</span>, Book1.author);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book 1 subject : &#123;0&#125;&quot;</span>, Book1.subject);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book 1 book_id :&#123;0&#125;&quot;</span>, Book1.book_id);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 打印 Book2 信息 */</span></span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book 2 title : &#123;0&#125;&quot;</span>, Book2.title);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book 2 author : &#123;0&#125;&quot;</span>, Book2.author);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book 2 subject : &#123;0&#125;&quot;</span>, Book2.subject);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book 2 book_id : &#123;0&#125;&quot;</span>, Book2.book_id);      </span><br><span class="line"></span><br><span class="line">      Console.ReadKey();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Book </span><span class="number">1</span> title : C Programming</span><br><span class="line"><span class="keyword">Book </span><span class="number">1</span> author : Nuha Ali</span><br><span class="line"><span class="keyword">Book </span><span class="number">1</span> <span class="keyword">subject </span>: C Programming Tutorial</span><br><span class="line"><span class="keyword">Book </span><span class="number">1</span> <span class="keyword">book_id </span>: <span class="number">6495407</span></span><br><span class="line"><span class="keyword">Book </span><span class="number">2</span> title : Telecom <span class="keyword">Billing</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Book </span><span class="number">2</span> author : Zara Ali</span><br><span class="line"><span class="keyword">Book </span><span class="number">2</span> <span class="keyword">subject </span>: Telecom <span class="keyword">Billing </span>Tutorial</span><br><span class="line"><span class="keyword">Book </span><span class="number">2</span> <span class="keyword">book_id </span>: <span class="number">6495700</span></span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em></p><p><strong>C语言：</strong></p><h5 id="一、结构体定义："><a href="#一、结构体定义：" class="headerlink" title="一、结构体定义："></a>一、结构体定义：</h5><p>格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> &#123;</span>    </span><br><span class="line">member-<span class="built_in">list</span>    </span><br><span class="line">member-<span class="built_in">list</span>    </span><br><span class="line">    member-<span class="built_in">list</span>     </span><br><span class="line">    ... </span><br><span class="line">&#125; variable-<span class="built_in">list</span> ;</span><br></pre></td></tr></table></figure><p>实例：</p><ol><li><pre><code class="C">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c//同时又声明了结构体变量s1//这个结构体并没有标明其标签struct &#123;    int a;    char b;    double c;&#125; s1;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> ```C</span><br><span class="line">   <span class="comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span></span><br><span class="line">   <span class="comment">//结构体的标签被命名为SIMPLE,没有声明变量</span></span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">SIMPLE</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> a;</span><br><span class="line">       <span class="type">char</span> b;</span><br><span class="line">       <span class="type">double</span> c;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3</span></span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">SIMPLE</span> t1, t2[<span class="number">20</span>], *t3;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;C<br>&#x2F;&#x2F;也可以用typedef创建新类型<br>typedef struct<br>{<br>int a;<br>char b;<br>double c;<br>} Simple2;<br>&#x2F;&#x2F;现在可以用Simple2作为类型声明新的结构体变量<br>Simple2 u1, u2[20], *u3;</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">##### 二、结构体声明（初始化）：</span></span><br><span class="line"></span><br><span class="line">C<span class="meta">#：</span></span><br><span class="line"></span><br><span class="line">```C<span class="meta">#</span></span><br><span class="line"><span class="keyword">struct</span> Books</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> author;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> book_id;</span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line">Books Book1;        <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br></pre></td></tr></table></figure></li></ol><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   public <span class="built_in">string</span> title;</span><br><span class="line">   public <span class="built_in">string</span> author;</span><br><span class="line">   public <span class="built_in">string</span> subject;</span><br><span class="line">   public <span class="type">int</span> book_id;</span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book1</span>;</span>        <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br></pre></td></tr></table></figure><h2 id="C-结构的特点"><a href="#C-结构的特点" class="headerlink" title="C# 结构的特点"></a>C# 结构的特点</h2><p>您已经用了一个简单的名为 Books 的结构。在 C# 中的结构与传统的 C 或 C++ 中的结构不同。C# 中的结构有以下特点：</p><ul><li>结构可带有方法、字段、索引、属性、运算符方法和事件。</li><li>结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。</li><li>与类不同，结构不能继承其他的结构或类。</li><li>结构不能作为其他结构或类的基础结构。</li><li>结构可实现一个或多个接口。</li><li>结构成员不能指定为 abstract、virtual 或 protected。</li><li>当您使用 <strong>New</strong> 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li></ul><h2 id="类-vs-结构"><a href="#类-vs-结构" class="headerlink" title="类 vs 结构"></a>类 vs 结构</h2><p>类和结构有以下几个基本的不同点：</p><ul><li>类是引用类型，结构是值类型。</li><li>结构不支持继承。</li><li>结构不能声明默认的构造函数。</li></ul><p>针对上述讨论，让我们重写前面的实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">struct</span> Books</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> title;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> author;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> subject;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">int</span> book_id;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span>(<span class="params"><span class="built_in">string</span> t, <span class="built_in">string</span> a, <span class="built_in">string</span> s, <span class="built_in">int</span> id</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      title = t;</span><br><span class="line">      author = a;</span><br><span class="line">      subject = s;</span><br><span class="line">      book_id =id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Title : &#123;0&#125;&quot;</span>, title);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Author : &#123;0&#125;&quot;</span>, author);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Subject : &#123;0&#125;&quot;</span>, subject);</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Book_id :&#123;0&#125;&quot;</span>, book_id);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">testStructure</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      Books Book1 = <span class="keyword">new</span> Books(); <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br><span class="line">      Books Book2 = <span class="keyword">new</span> Books(); <span class="comment">/* 声明 Book2，类型为 Books */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* book 1 详述 */</span></span><br><span class="line">      Book1.setValues(<span class="string">&quot;C Programming&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Nuha Ali&quot;</span>, <span class="string">&quot;C Programming Tutorial&quot;</span>,<span class="number">6495407</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* book 2 详述 */</span></span><br><span class="line">      Book2.setValues(<span class="string">&quot;Telecom Billing&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Zara Ali&quot;</span>, <span class="string">&quot;Telecom Billing Tutorial&quot;</span>, <span class="number">6495700</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 打印 Book1 信息 */</span></span><br><span class="line">      Book1.display();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 打印 Book2 信息 */</span></span><br><span class="line">      Book2.display();</span><br><span class="line"></span><br><span class="line">      Console.ReadKey();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Title : C Programming</span><br><span class="line">Author : Nuha Ali</span><br><span class="line">Subject : C Programming Tutorial</span><br><span class="line">Book_id : <span class="number">6495407</span></span><br><span class="line">Title : Telecom Billing</span><br><span class="line">Author : Zara Ali</span><br><span class="line">Subject : Telecom Billing Tutorial</span><br><span class="line">Book_id : <span class="number">6495700</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（八）——字符串</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>在 C# 中，您可以使用字符数组来表示字符串，但是，更常见的做法是使用 <strong>string</strong> 关键字来声明一个字符串变量。string 关键字是 <strong>System.String</strong> 类的别名。</p><h2 id="创建-String-对象"><a href="#创建-String-对象" class="headerlink" title="创建 String 对象"></a>创建 String 对象</h2><p>您可以使用以下方法之一来创建 string 对象：</p><ul><li>通过给 String 变量指定一个字符串</li><li>通过使用 String 类构造函数</li><li>通过使用字符串串联运算符（ + ）</li><li>通过检索属性或调用一个返回字符串的方法</li><li>通过格式化方法来转换一个值或对象为它的字符串表示形式</li></ul><p>下面的实例演示了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StringApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//字符串，字符串连接</span></span><br><span class="line">            <span class="built_in">string</span> fname, lname;</span><br><span class="line">            fname = <span class="string">&quot;Rowan&quot;</span>;</span><br><span class="line">            lname = <span class="string">&quot;Atkinson&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> fullname = fname + lname;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Full Name: &#123;0&#125;&quot;</span>, fullname);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过使用 string 构造函数</span></span><br><span class="line">            <span class="built_in">char</span>[] letters = &#123; <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> greetings = <span class="keyword">new</span> <span class="built_in">string</span>(letters);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Greetings: &#123;0&#125;&quot;</span>, greetings);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方法返回字符串</span></span><br><span class="line">            <span class="built_in">string</span>[] sarray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;From&quot;</span>, <span class="string">&quot;Tutorials&quot;</span>, <span class="string">&quot;Point&quot;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> message = String.Join(<span class="string">&quot; &quot;</span>, sarray);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Message: &#123;0&#125;&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用于转化值的格式化方法</span></span><br><span class="line">            DateTime waiting = <span class="keyword">new</span> DateTime(<span class="number">2012</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">58</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">string</span> chat = String.Format(<span class="string">&quot;Message sent at &#123;0:t&#125; on &#123;0:D&#125;&quot;</span>,</span><br><span class="line">            waiting);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Message: &#123;0&#125;&quot;</span>, chat);</span><br><span class="line">            Console.ReadKey() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Full Name: RowanAtkinson</span><br><span class="line">Greetings: Hello</span><br><span class="line">Message: Hello From Tutorials Point</span><br><span class="line">Message: Message sent at <span class="number">17</span>:<span class="number">58</span> <span class="keyword">on</span> Wednesday, <span class="number">10</span> October <span class="number">2012</span></span><br></pre></td></tr></table></figure><h2 id="String-类的属性"><a href="#String-类的属性" class="headerlink" title="String 类的属性"></a>String 类的属性</h2><p>String 类有以下两个属性：</p><table><thead><tr><th>序号</th><th>属性名称 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>Chars</strong> 在当前 <em>String</em> 对象中获取 <em>Char</em> 对象的指定位置。</td></tr><tr><td>2</td><td><strong>Length</strong> 在当前的 <em>String</em> 对象中获取字符数。</td></tr></tbody></table><h2 id="String-类的方法"><a href="#String-类的方法" class="headerlink" title="String 类的方法"></a>String 类的方法</h2><p>String 类有许多方法用于 string 对象的操作。下面的表格提供了一些最常用的方法：</p><table><thead><tr><th>序号</th><th>方法名称 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>public static int Compare( string strA, string strB )</strong>  比较两个指定的 string 对象，并返回一个表示它们在排列顺序中相对位置的整数。该方法区分大小写。</td></tr><tr><td>2</td><td><strong>public static int Compare( string strA, string strB, bool ignoreCase )</strong>  比较两个指定的 string 对象，并返回一个表示它们在排列顺序中相对位置的整数。但是，如果布尔参数为真时，该方法不区分大小写。</td></tr><tr><td>3</td><td><strong>public static string Concat( string str0, string str1 )</strong>  连接两个 string 对象。</td></tr><tr><td>4</td><td><strong>public static string Concat( string str0, string str1, string str2 )</strong>  连接三个 string 对象。</td></tr><tr><td>5</td><td><strong>public static string Concat( string str0, string str1, string str2, string str3 )</strong>  连接四个 string 对象。</td></tr><tr><td>6</td><td><strong>public bool Contains( string value )</strong>  返回一个表示指定 string 对象是否出现在字符串中的值。</td></tr><tr><td>7</td><td><strong>public static string Copy( string str )</strong>  创建一个与指定字符串具有相同值的新的 String 对象。</td></tr><tr><td>8</td><td><strong>public void CopyTo( int sourceIndex, char[] destination, int destinationIndex, int count )</strong>  从 string 对象的指定位置开始复制指定数量的字符到 Unicode 字符数组中的指定位置。</td></tr><tr><td>9</td><td><strong>public bool EndsWith( string value )</strong>  判断 string 对象的结尾是否匹配指定的字符串。</td></tr><tr><td>10</td><td><strong>public bool Equals( string value )</strong>  判断当前的 string 对象是否与指定的 string 对象具有相同的值。</td></tr><tr><td>11</td><td><strong>public static bool Equals( string a, string b )</strong>  判断两个指定的 string 对象是否具有相同的值。</td></tr><tr><td>12</td><td><strong>public static string Format( string format, Object arg0 )</strong>  把指定字符串中一个或多个格式项替换为指定对象的字符串表示形式。</td></tr><tr><td>13</td><td><strong>public int IndexOf( char value )</strong>  返回指定 Unicode 字符在当前字符串中第一次出现的索引，索引从 0 开始。</td></tr><tr><td>14</td><td><strong>public int IndexOf( string value )</strong>  返回指定字符串在该实例中第一次出现的索引，索引从 0 开始。</td></tr><tr><td>15</td><td><strong>public int IndexOf( char value, int startIndex )</strong>  返回指定 Unicode 字符从该字符串中指定字符位置开始搜索第一次出现的索引，索引从 0 开始。</td></tr><tr><td>16</td><td><strong>public int IndexOf( string value, int startIndex )</strong>  返回指定字符串从该实例中指定字符位置开始搜索第一次出现的索引，索引从 0 开始。</td></tr><tr><td>17</td><td><strong>public int IndexOfAny( char[] anyOf )</strong>  返回某一个指定的 Unicode 字符数组中任意字符在该实例中第一次出现的索引，索引从 0 开始。</td></tr><tr><td>18</td><td><strong>public int IndexOfAny( char[] anyOf, int startIndex )</strong>  返回某一个指定的 Unicode 字符数组中任意字符从该实例中指定字符位置开始搜索第一次出现的索引，索引从 0 开始。</td></tr><tr><td>19</td><td><strong>public string Insert( int startIndex, string value )</strong>  返回一个新的字符串，其中，指定的字符串被插入在当前 string 对象的指定索引位置。</td></tr><tr><td>20</td><td><strong>public static bool IsNullOrEmpty( string value )</strong>  指示指定的字符串是否为 null 或者是否为一个空的字符串。</td></tr><tr><td>21</td><td><strong>public static string Join( string separator,        string[] value )</strong>  连接一个字符串数组中的所有元素，使用指定的分隔符分隔每个元素。</td></tr><tr><td>22</td><td><strong>public static string Join( string separator, string[] value, int startIndex, int count )</strong>  连接一个字符串数组中的指定位置开始的指定元素，使用指定的分隔符分隔每个元素。</td></tr><tr><td>23</td><td><strong>public int LastIndexOf( char value )</strong>  返回指定 Unicode 字符在当前 string 对象中最后一次出现的索引位置，索引从 0 开始。</td></tr><tr><td>24</td><td><strong>public int LastIndexOf( string value )</strong>  返回指定字符串在当前 string 对象中最后一次出现的索引位置，索引从 0 开始。</td></tr><tr><td>25</td><td><strong>public string Remove( int startIndex )</strong>  移除当前实例中的所有字符，从指定位置开始，一直到最后一个位置为止，并返回字符串。</td></tr><tr><td>26</td><td><strong>public string Remove( int startIndex, int count )</strong>  从当前字符串的指定位置开始移除指定数量的字符，并返回字符串。</td></tr><tr><td>27</td><td><strong>public string Replace( char oldChar, char newChar )</strong>  把当前 string 对象中，所有指定的 Unicode 字符替换为另一个指定的 Unicode 字符，并返回新的字符串。</td></tr><tr><td>28</td><td><strong>public string Replace( string oldValue, string newValue )</strong>  把当前 string 对象中，所有指定的字符串替换为另一个指定的字符串，并返回新的字符串。</td></tr><tr><td>29</td><td><strong>public string[] Split( params char[] separator )</strong>  返回一个字符串数组，包含当前的 string 对象中的子字符串，子字符串是使用指定的 Unicode 字符数组中的元素进行分隔的。</td></tr><tr><td>30</td><td><strong>public string[] Split( char[] separator, int count )</strong>  返回一个字符串数组，包含当前的 string 对象中的子字符串，子字符串是使用指定的 Unicode 字符数组中的元素进行分隔的。int 参数指定要返回的子字符串的最大数目。</td></tr><tr><td>31</td><td><strong>public bool StartsWith( string value )</strong>  判断字符串实例的开头是否匹配指定的字符串。</td></tr><tr><td>32</td><td><strong>public char[] ToCharArray()</strong> 返回一个带有当前 string 对象中所有字符的 Unicode 字符数组。</td></tr><tr><td>33</td><td><strong>public char[] ToCharArray( int startIndex, int length )</strong>  返回一个带有当前 string 对象中所有字符的 Unicode 字符数组，从指定的索引开始，直到指定的长度为止。</td></tr><tr><td>34</td><td><strong>public string ToLower()</strong> 把字符串转换为小写并返回。</td></tr><tr><td>35</td><td><strong>public string ToUpper()</strong> 把字符串转换为大写并返回。</td></tr><tr><td>36</td><td><strong>public string Trim()</strong> 移除当前 String 对象中的所有前导空白字符和后置空白字符。</td></tr></tbody></table><p>上面的方法列表并不详尽，请访问 MSDN 库，查看完整的方法列表和 String 类构造函数。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面的实例演示了上面提到的一些方法：</p><h4 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StringApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">StringProg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">string</span> str1 = <span class="string">&quot;This is test&quot;</span>;</span><br><span class="line">         <span class="built_in">string</span> str2 = <span class="string">&quot;This is text&quot;</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (String.Compare(str1, str2) == <span class="number">0</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(str1 + <span class="string">&quot; and &quot;</span> + str2 +  <span class="string">&quot; are equal.&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(str1 + <span class="string">&quot; and &quot;</span> + str2 + <span class="string">&quot; are not equal.&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey() ;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> test <span class="keyword">and</span> This <span class="keyword">is</span> text are <span class="keyword">not</span> equal.</span><br></pre></td></tr></table></figure><h4 id="字符串包含字符串："><a href="#字符串包含字符串：" class="headerlink" title="字符串包含字符串："></a>字符串包含字符串：</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StringApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">StringProg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">string</span> str = <span class="string">&quot;This is test&quot;</span>;</span><br><span class="line">         <span class="keyword">if</span> (str.Contains(<span class="string">&quot;test&quot;</span>))</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The sequence &#x27;test&#x27; was found.&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey() ;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The sequence <span class="string">&#x27;test&#x27;</span> was found.</span><br></pre></td></tr></table></figure><h4 id="获取子字符串："><a href="#获取子字符串：" class="headerlink" title="获取子字符串："></a>获取子字符串：</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StringApplication</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">StringProg</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">string</span> str = <span class="string">&quot;Last night I dreamt of San Pedro&quot;</span>;</span><br><span class="line">                        Console.WriteLine(str);</span><br><span class="line">                        <span class="built_in">string</span> substr = str.Substring(<span class="number">23</span>);</span><br><span class="line">                        Console.WriteLine(substr);</span><br><span class="line">                        Console.ReadKey() ;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Last</span> <span class="variable">night</span> <span class="built_in">I</span> <span class="variable">dreamt</span> <span class="variable">of</span> <span class="variable">San</span> <span class="variable">Pedro</span></span><br><span class="line"><span class="variable">San</span> <span class="variable">Pedro</span></span><br></pre></td></tr></table></figure><h4 id="连接字符串："><a href="#连接字符串：" class="headerlink" title="连接字符串："></a>连接字符串：</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace StringApplication</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> StringProg</span><br><span class="line">   &#123;</span><br><span class="line">      static void <span class="constructor">Main(<span class="params">string</span>[] <span class="params">args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">string</span><span class="literal">[]</span> starray = <span class="keyword">new</span> <span class="built_in">string</span><span class="literal">[]</span>&#123;<span class="string">&quot;Down the way nights are dark&quot;</span>,</span><br><span class="line">         <span class="string">&quot;And the sun shines daily on the mountain top&quot;</span>,</span><br><span class="line">         <span class="string">&quot;I took a trip on a sailing ship&quot;</span>,</span><br><span class="line">         <span class="string">&quot;And when I reached Jamaica&quot;</span>,</span><br><span class="line">         <span class="string">&quot;I made a stop&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">string</span> str = String.<span class="constructor">Join(<span class="string">&quot;\n&quot;</span>, <span class="params">starray</span>)</span>;</span><br><span class="line">         Console.<span class="constructor">WriteLine(<span class="params">str</span>)</span>;</span><br><span class="line">         Console.<span class="constructor">ReadKey()</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Down the way nights are dark</span><br><span class="line">And the sun shines daily on the mountain <span class="attribute">top</span></span><br><span class="line"><span class="selector-tag">I</span> took <span class="selector-tag">a</span> trip on <span class="selector-tag">a</span> sailing ship</span><br><span class="line">And when <span class="selector-tag">I</span> reached Jamaica</span><br><span class="line"><span class="selector-tag">I</span> made <span class="selector-tag">a</span> stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（七）——数组</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><p>在 C# 中声明一个数组，您可以使用下面的语法：</p><p>其中，</p><ul><li><em>datatype</em> 用于指定被存储在数组中的元素的类型。</li><li><em>[ ]</em> 指定数组的秩（维度）。秩指定数组的大小。</li><li><em>arrayName</em> 指定数组的名称。</li></ul><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance;</span><br></pre></td></tr></table></figure><h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><p>声明一个数组不会在内存中初始化数组。当初始化数组变量时，您可以赋值给数组。</p><p>数组是一个引用类型，所以您需要使用 <strong>new</strong> 关键字来创建数组的实例。</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h2 id="赋值给数组"><a href="#赋值给数组" class="headerlink" title="赋值给数组"></a>赋值给数组</h2><p>您可以通过使用索引号赋值给一个单独的数组元素，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">10</span>];</span><br><span class="line">balance[<span class="number">0</span>] = <span class="number">4500.0</span>;</span><br></pre></td></tr></table></figure><p>您可以在声明数组的同时给数组赋值，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = &#123; <span class="number">2340.0</span>, <span class="number">4523.69</span>, <span class="number">3421.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>您也可以创建并初始化一个数组，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] marks = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br></pre></td></tr></table></figure><p>在上述情况下，你也可以省略数组的大小，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] marks = <span class="keyword">new</span> <span class="built_in">int</span>[]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br></pre></td></tr></table></figure><p>您也可以赋值一个数组变量到另一个目标数组变量中。在这种情况下，目标和源会指向相同的内存位置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] marks = <span class="keyword">new</span> <span class="built_in">int</span>[]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] score = marks;</span><br></pre></td></tr></table></figure><p>当您创建一个数组时，C# 编译器会根据数组类型隐式初始化每个数组元素为一个默认值。例如，int 数组的所有元素都会被初始化为 0。</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>元素是通过带索引的数组名称来访问的。这是通过把元素的索引放置在数组名称后的方括号中来实现的。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> salary = balance[<span class="number">9</span>];</span><br></pre></td></tr></table></figure><p>下面是一个实例，使用上面提到的三个概念，即声明、赋值、访问数组：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ArrayApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">MyArray</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> []  n = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>]; <span class="comment">/* n 是一个带有 10 个整数的数组 */</span></span><br><span class="line">         <span class="built_in">int</span> i,j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 初始化数组 n 中的元素 */</span>        </span><br><span class="line">         <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">         &#123;</span><br><span class="line">            n[ i ] = i + <span class="number">100</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">         <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ )</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Element[&#123;0&#125;] = &#123;1&#125;&quot;</span>, j, n[j]);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Element[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Element[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">Element[<span class="number">2</span>] = <span class="number">102</span></span><br><span class="line">Element[<span class="number">3</span>] = <span class="number">103</span></span><br><span class="line">Element[<span class="number">4</span>] = <span class="number">104</span></span><br><span class="line">Element[<span class="number">5</span>] = <span class="number">105</span></span><br><span class="line">Element[<span class="number">6</span>] = <span class="number">106</span></span><br><span class="line">Element[<span class="number">7</span>] = <span class="number">107</span></span><br><span class="line">Element[<span class="number">8</span>] = <span class="number">108</span></span><br><span class="line">Element[<span class="number">9</span>] = <span class="number">109</span></span><br></pre></td></tr></table></figure><h3 id="使用-foreach-循环"><a href="#使用-foreach-循环" class="headerlink" title="使用 foreach 循环"></a>使用 <em>foreach</em> 循环</h3><p>在前面的实例中，我们使用一个 for 循环来访问每个数组元素。您也可以使用一个  <strong>foreach</strong> 语句来遍历数组。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ArrayApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">MyArray</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> []  n = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>]; <span class="comment">/* n 是一个带有 10 个整数的数组 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 初始化数组 n 中的元素 */</span>        </span><br><span class="line">         <span class="keyword">for</span> ( <span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">         &#123;</span><br><span class="line">            n[i] = i + <span class="number">100</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">         <span class="keyword">foreach</span> (<span class="built_in">int</span> j <span class="keyword">in</span> n )</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="built_in">int</span> i = j<span class="number">-100</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Element[&#123;0&#125;] = &#123;1&#125;&quot;</span>, i, j);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Element[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Element[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">Element[<span class="number">2</span>] = <span class="number">102</span></span><br><span class="line">Element[<span class="number">3</span>] = <span class="number">103</span></span><br><span class="line">Element[<span class="number">4</span>] = <span class="number">104</span></span><br><span class="line">Element[<span class="number">5</span>] = <span class="number">105</span></span><br><span class="line">Element[<span class="number">6</span>] = <span class="number">106</span></span><br><span class="line">Element[<span class="number">7</span>] = <span class="number">107</span></span><br><span class="line">Element[<span class="number">8</span>] = <span class="number">108</span></span><br><span class="line">Element[<span class="number">9</span>] = <span class="number">109</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp基础操作（六）——方法</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E6%96%B9%E6%B3%95/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="C-中调用方法"><a href="#C-中调用方法" class="headerlink" title="C# 中调用方法"></a>C# 中调用方法</h2><p>您可以使用方法名调用方法。下面的实例演示了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FindMax</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">/* 局部变量声明 */</span></span><br><span class="line">         <span class="built_in">int</span> result;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">            result = num1;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">            result = num2;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">         <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">         <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">         <span class="built_in">int</span> ret;</span><br><span class="line">         NumberManipulator n = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//调用 FindMax 方法</span></span><br><span class="line">         ret = n.FindMax(a, b);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;最大值是： &#123;0&#125;&quot;</span>, ret );</span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您也可以使用类的实例从另一个类中调用其他类的公有方法。例如，方法 <em>FindMax</em> 属于 <em>NumberManipulator</em> 类，您可以从另一个类 <em>Test</em> 中调用它。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FindMax</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 局部变量声明 */</span></span><br><span class="line">            <span class="built_in">int</span> result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">                result = num1;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result = num2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="built_in">int</span> ret;</span><br><span class="line">            NumberManipulator n = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">            <span class="comment">//调用 FindMax 方法</span></span><br><span class="line">            ret = n.FindMax(a, b);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;最大值是： &#123;0&#125;&quot;</span>, ret );</span><br><span class="line">            Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：当在主函数中调用方法的时候，一定要先实例化对象。</strong></p><h2 id="递归方法调用"><a href="#递归方法调用" class="headerlink" title="递归方法调用"></a>递归方法调用</h2><p>一个方法可以自我调用。这就是所谓的 <strong>递归</strong>。下面的实例使用递归函数计算一个数的阶乘：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">factorial</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">            <span class="built_in">int</span> result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = factorial(num - <span class="number">1</span>) * num;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            NumberManipulator n = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">            <span class="comment">//调用 factorial 方法</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;6 的阶乘是： &#123;0&#125;&quot;</span>, n.factorial(<span class="number">6</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;7 的阶乘是： &#123;0&#125;&quot;</span>, n.factorial(<span class="number">7</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;8 的阶乘是： &#123;0&#125;&quot;</span>, n.factorial(<span class="number">8</span>));</span><br><span class="line">            Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> 的阶乘是： <span class="number">720</span></span><br><span class="line"><span class="number">7</span> 的阶乘是： <span class="number">5040</span></span><br><span class="line"><span class="number">8</span> 的阶乘是： <span class="number">40320</span></span><br></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>当调用带有参数的方法时，您需要向方法传递参数。在 C# 中，有三种向方法传递参数的方式：</p><table><thead><tr><th>方式</th><th>描述</th></tr></thead><tbody><tr><td>值参数</td><td>这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。</td></tr><tr><td>引用参数</td><td>这种方式复制参数的内存位置的引用给形式参数。这意味着，当形参的值发生改变时，同时也改变实参的值。</td></tr><tr><td>输出参数</td><td>这种方式可以返回多个值。</td></tr></tbody></table><h3 id="1-按值传递参数"><a href="#1-按值传递参数" class="headerlink" title="1.按值传递参数"></a>1.按值传递参数</h3><p>这是参数传递的默认方式。在这种方式下，当调用一个方法时，会为每个值参数创建一个新的存储位置。</p><p><em><strong>实际参数的值会复制给形参，实参和形参使用的是两个不同内存中的值。所以，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。</strong></em>下面的实例演示了这个概念：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> temp;</span><br><span class="line">         </span><br><span class="line">         temp = x; <span class="comment">/* 保存 x 的值 */</span></span><br><span class="line">         x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">         y = temp; <span class="comment">/* 把 temp 赋值给 y */</span></span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         NumberManipulator n = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">         <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">         <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">         <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">         </span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之前，a 的值： &#123;0&#125;&quot;</span>, a);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之前，b 的值： &#123;0&#125;&quot;</span>, b);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">/* 调用函数来交换值 */</span></span><br><span class="line">         n.swap(a, b);</span><br><span class="line">         </span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之后，a 的值： &#123;0&#125;&quot;</span>, a);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之后，b 的值： &#123;0&#125;&quot;</span>, b);</span><br><span class="line">         </span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在交换之前，a 的值：<span class="number">100</span></span><br><span class="line">在交换之前，b 的值：<span class="number">200</span></span><br><span class="line">在交换之后，a 的值：<span class="number">100</span></span><br><span class="line">在交换之后，b 的值：<span class="number">200</span></span><br></pre></td></tr></table></figure><p>结果表明，即使在函数内改变了值，值也没有发生任何的变化。</p><h3 id="2-按引用传递参数"><a href="#2-按引用传递参数" class="headerlink" title="2.按引用传递参数"></a>2.按引用传递参数</h3><p>引用参数是一个对变量的<strong>内存位置的引用</strong>。当按引用传递参数时，与值参数不同的是，它不会为这些参数创建一个新的存储位置。引用参数表示与提供给方法的实际参数具有相同的内存位置。</p><p>在 C# 中，使用 <strong>ref</strong> 关键字声明引用参数。下面的实例演示了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> x, <span class="keyword">ref</span> <span class="built_in">int</span> y</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> temp;</span><br><span class="line"></span><br><span class="line">         temp = x; <span class="comment">/* 保存 x 的值 */</span></span><br><span class="line">         x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">         y = temp; <span class="comment">/* 把 temp 赋值给 y */</span></span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         NumberManipulator n = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">         <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">         <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">         <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之前，a 的值： &#123;0&#125;&quot;</span>, a);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之前，b 的值： &#123;0&#125;&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 调用函数来交换值 */</span></span><br><span class="line">         n.swap(<span class="keyword">ref</span> a, <span class="keyword">ref</span> b);</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之后，a 的值： &#123;0&#125;&quot;</span>, a);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在交换之后，b 的值： &#123;0&#125;&quot;</span>, b);</span><br><span class="line"> </span><br><span class="line">         Console.ReadLine();</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在交换之前，a 的值：<span class="number">100</span></span><br><span class="line">在交换之前，b 的值：<span class="number">200</span></span><br><span class="line">在交换之后，a 的值：<span class="number">200</span></span><br><span class="line">在交换之后，b 的值：<span class="number">100</span></span><br></pre></td></tr></table></figure><p>结果表明，<em>swap</em> 函数内的值改变了，且这个改变可以在  <em>Main</em> 函数中反映出来。</p><h3 id="3-按输出传递参数"><a href="#3-按输出传递参数" class="headerlink" title="3.按输出传递参数"></a>3.按输出传递参数</h3><p>return 语句可用于只从函数中返回一个值。但是，可以使用 <strong>输出参数</strong> 来从函数中返回两个值。输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似。</p><p>下面的实例演示了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValue</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> x </span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> temp = <span class="number">5</span>;</span><br><span class="line">         x = temp;</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         NumberManipulator n = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">         <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">         <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">         </span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在方法调用之前，a 的值： &#123;0&#125;&quot;</span>, a);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">/* 调用函数来获取值 */</span></span><br><span class="line">         n.getValue(<span class="keyword">out</span> a);</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;在方法调用之后，a 的值： &#123;0&#125;&quot;</span>, a);</span><br><span class="line">         Console.ReadLine();</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在方法调用之前，a 的值： <span class="number">100</span></span><br><span class="line">在方法调用之后，a 的值： <span class="number">5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（五）——封装</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="C-封装"><a href="#C-封装" class="headerlink" title="C# 封装"></a>C# 封装</h1><p><strong>封装</strong> 被定义为”把一个或多个项目封闭在一个物理的或者逻辑的包中”。在面向对象程序设计方法论中，封装是为了防止对实现细节的访问。</p><p>抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，封装则使开发者<em>实现所需级别的抽象</em>。</p><p>C# 封装根据具体的需要，设置使用者的访问权限，并通过 <strong>访问修饰符</strong> 来实现。</p><p>一个 <strong>访问修饰符</strong> 定义了一个类成员的范围和可见性。C# 支持的访问修饰符如下所示：</p><ul><li>public：所有对象都可以访问；</li><li>private：对象本身在对象内部可以访问；</li><li>protected：只有该类对象及其子类对象可以访问</li><li>internal：同一个程序集的对象可以访问；</li><li>protected internal：访问限于当前程序集或派生自包含类的类型。</li></ul><p><img src="/../images/csharp%E4%BF%AE%E9%A5%B0%E7%AC%A6.png" alt="csharp修饰符"></p><h3 id="一、Public-访问修饰符"><a href="#一、Public-访问修饰符" class="headerlink" title="一、Public 访问修饰符"></a>一、Public 访问修饰符</h3><p>Public 访问修饰符允许一个类将其成员变量和成员函数暴露给其他的函数和对象。任何公有成员可以被外部的类访问。</p><p>下面的实例说明了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RectangleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成员变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> width;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;长度： &#123;0&#125;&quot;</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;宽度： &#123;0&#125;&quot;</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">// Rectangle 结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            r.length = <span class="number">4.5</span>;</span><br><span class="line">            r.width = <span class="number">3.5</span>;</span><br><span class="line">            r.Display();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">长度： <span class="number">4.5</span></span><br><span class="line">宽度： <span class="number">3.5</span></span><br><span class="line">面积： <span class="number">15.75</span></span><br></pre></td></tr></table></figure><p>在上面的实例中，成员变量 length 和 width 被声明为 <strong>public</strong>，所以它们可以被函数 Main() 使用 Rectangle 类的实例 <strong>r</strong> 访问。</p><p>成员函数 <em>Display()</em> 和 <em>GetArea()</em> 可以直接访问这些变量。</p><p>成员函数 <em>Display()</em> 也被声明为 <strong>public</strong>，所以它也能被 <em>Main()</em> 使用 Rectangle 类的实例 <strong>r</strong> 访问。</p><h3 id="二、Private-访问修饰符"><a href="#二、Private-访问修饰符" class="headerlink" title="二、Private 访问修饰符"></a>二、Private 访问修饰符</h3><p>Private 访问修饰符允许一个类将其成员变量和成员函数对其他的函数和对象进行隐藏。只有同一个类中的函数可以访问它的私有成员。即使是类的实例也不能访问它的私有成员。</p><p>下面的实例说明了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RectangleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成员变量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> width;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Acceptdetails</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入长度：&quot;</span>);</span><br><span class="line">            length = Convert.ToDouble(Console.ReadLine());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入宽度：&quot;</span>);</span><br><span class="line">            width = Convert.ToDouble(Console.ReadLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;长度： &#123;0&#125;&quot;</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;宽度： &#123;0&#125;&quot;</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//end class Rectangle    </span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            r.Acceptdetails();</span><br><span class="line">            r.Display();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入长度：</span><br><span class="line"><span class="number">4.4</span></span><br><span class="line">请输入宽度：</span><br><span class="line"><span class="number">3.3</span></span><br><span class="line">长度： <span class="number">4.4</span></span><br><span class="line">宽度： <span class="number">3.3</span></span><br><span class="line">面积： <span class="number">14.52</span></span><br></pre></td></tr></table></figure><p>在上面的实例中，成员变量 length 和 width 被声明为 <strong>private</strong>，所以它们不能被函数 Main() 访问。</p><p>成员函数 <em>AcceptDetails()</em> 和 <em>Display()</em> 可以访问这些变量。</p><p>由于成员函数 <em>AcceptDetails()</em> 和 <em>Display()</em> 被声明为 <strong>public</strong>，所以它们可以被 <em>Main()</em> 使用 Rectangle 类的实例 <strong>r</strong> 访问。</p><h3 id="三、Protected-访问修饰符"><a href="#三、Protected-访问修饰符" class="headerlink" title="三、Protected 访问修饰符"></a>三、Protected 访问修饰符</h3><p>Protected 访问修饰符允许子类访问它的基类的成员变量和成员函数。这样有助于实现继承。我们将在继承的章节详细讨论这个。更详细地讨论这个。</p><h3 id="四、Internal-访问修饰符"><a href="#四、Internal-访问修饰符" class="headerlink" title="四、Internal 访问修饰符"></a>四、Internal 访问修饰符</h3><p>Internal 访问说明符允许一个类将其成员变量和成员函数暴露给当前程序中的其他函数和对象。换句话说，带有 internal 访问修饰符的任何成员可以被定义在该成员所定义的应用程序内的任何类或方法访问。</p><p>下面的实例说明了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RectangleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成员变量</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">double</span> width;</span><br><span class="line">       </span><br><span class="line">        <span class="function"><span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;长度： &#123;0&#125;&quot;</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;宽度： &#123;0&#125;&quot;</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//end class Rectangle    </span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            r.length = <span class="number">4.5</span>;</span><br><span class="line">            r.width = <span class="number">3.5</span>;</span><br><span class="line">            r.Display();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">长度： <span class="number">4.5</span></span><br><span class="line">宽度： <span class="number">3.5</span></span><br><span class="line">面积： <span class="number">15.75</span></span><br></pre></td></tr></table></figure><p>在上面的实例中，请注意成员函数 <em>GetArea()</em> 声明的时候不带有任何访问修饰符。如果没有指定访问修饰符，则使用类成员的默认访问修饰符，即为 <strong>private</strong>。</p><h3 id="五、Protected-Internal-访问修饰符"><a href="#五、Protected-Internal-访问修饰符" class="headerlink" title="五、Protected Internal 访问修饰符"></a>五、Protected Internal 访问修饰符</h3><p>Protected Internal 访问修饰符允许在本类,派生类或者包含该类的程序集中访问。这也被用于实现继承。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基本操作（四）——类型转换</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C# 类型转换"></a>C# 类型转换</h1><p>类型转换从根本上说是类型铸造，或者说是把数据从一种类型转换为另一种类型。在 C# 中，类型铸造有两种形式：</p><ul><li><strong>隐式类型转换</strong> - 这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li><strong>显式类型转换</strong> - 显式类型转换，即强制类型转换。显式转换需要强制转换运算符，而且强制转换会造成数据丢失。</li></ul><p>下面的实例显示了一个显式的类型转换：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TypeConversionApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExplicitConversion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> d = <span class="number">5673.74</span>;</span><br><span class="line">            <span class="built_in">int</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 强制转换 double 为 int</span></span><br><span class="line">            i = (<span class="built_in">int</span>)d;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5673</span></span><br></pre></td></tr></table></figure><h3 id="C-类型转换方法"><a href="#C-类型转换方法" class="headerlink" title="C# 类型转换方法"></a>C# 类型转换方法</h3><p>C# 提供了下列内置的类型转换方法：</p><table><thead><tr><th>序号</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>ToBoolean</strong> 如果可能的话，把类型转换为布尔型。</td></tr><tr><td>2</td><td><strong>ToByte</strong> 把类型转换为字节类型。</td></tr><tr><td>3</td><td><strong>ToChar</strong> 如果可能的话，把类型转换为单个 Unicode 字符类型。</td></tr><tr><td>4</td><td><strong>ToDateTime</strong> 把类型（整数或字符串类型）转换为 日期-时间 结构。</td></tr><tr><td>5</td><td><strong>ToDecimal</strong> 把浮点型或整数类型转换为十进制类型。</td></tr><tr><td>6</td><td><strong>ToDouble</strong> 把类型转换为双精度浮点型。</td></tr><tr><td>7</td><td><strong>ToInt16</strong> 把类型转换为 16 位整数类型。</td></tr><tr><td>8</td><td><strong>ToInt32</strong> 把类型转换为 32 位整数类型。</td></tr><tr><td>9</td><td><strong>ToInt64</strong> 把类型转换为 64 位整数类型。</td></tr><tr><td>10</td><td><strong>ToSbyte</strong> 把类型转换为有符号字节类型。</td></tr><tr><td>11</td><td><strong>ToSingle</strong> 把类型转换为小浮点数类型。</td></tr><tr><td>12</td><td><strong>ToString</strong> 把类型转换为字符串类型。</td></tr><tr><td>13</td><td><strong>ToType</strong> 把类型转换为指定类型。</td></tr><tr><td>14</td><td><strong>ToUInt16</strong> 把类型转换为 16 位无符号整数类型。</td></tr><tr><td>15</td><td><strong>ToUInt32</strong> 把类型转换为 32 位无符号整数类型。</td></tr><tr><td>16</td><td><strong>ToUInt64</strong> 把类型转换为 64 位无符号整数类型。</td></tr></tbody></table><p>下面的实例把不同值的类型转换为字符串类型：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TypeConversionApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StringConversion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">75</span>;</span><br><span class="line">            <span class="built_in">float</span> f = <span class="number">53.005f</span>;</span><br><span class="line">            <span class="built_in">double</span> d = <span class="number">2345.7652</span>;</span><br><span class="line">            <span class="built_in">bool</span> b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(i.ToString());</span><br><span class="line">            Console.WriteLine(f.ToString());</span><br><span class="line">            Console.WriteLine(d.ToString());</span><br><span class="line">            Console.WriteLine(b.ToString());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">75</span></span><br><span class="line"><span class="number">53.005</span></span><br><span class="line"><span class="number">2345.7652</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="接受来自用户的值"><a href="#接受来自用户的值" class="headerlink" title="接受来自用户的值"></a>接受来自用户的值</h3><p><strong>System</strong> 命名空间中的 <strong>Console</strong> 类提供了一个函数 **ReadLine()**，用于接收来自用户的输入，并把它存储到一个变量中。</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num;</span><br><span class="line">num = Convert.ToInt32(Console.ReadLine());</span><br></pre></td></tr></table></figure><p>函数 <strong>Convert.ToInt32()</strong> 把用户输入的数据转换为 int 数据类型，因为 <strong>Console.ReadLine()</strong> 只接受字符串格式的数据。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基本操作（三）——数据类型</title>
      <link href="/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/01/24/CSharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="在-C-中，变量分为以下几种类型："><a href="#在-C-中，变量分为以下几种类型：" class="headerlink" title="在 C# 中，变量分为以下几种类型："></a>在 C# 中，变量分为以下几种类型：</h2><ul><li>值类型（Value types）</li><li>引用类型（Reference types）</li><li>指针类型（Pointer types）</li></ul><h3 id="一、值类型"><a href="#一、值类型" class="headerlink" title="一、值类型"></a>一、值类型</h3><p>值类型变量可以直接分配给一个值。它们是从类 <strong>System.ValueType</strong> 中派生的。</p><p>值类型直接包含数据。比如 <strong>int、char、float</strong>，它们分别存储数字、字符、浮点数。当您声明一个 <strong>int</strong> 类型时，系统分配内存来存储值。</p><p><strong>区别</strong>：而C中没有类，值类型就是关键字，不从哪个类派生。</p><h3 id="二、引用类型"><a href="#二、引用类型" class="headerlink" title="二、引用类型"></a>二、引用类型</h3><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。</p><p>换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。<strong>内置的</strong> 引用类型有：<strong>object</strong>、<strong>dynamic</strong> 和 <strong>string</strong>。</p><h4 id="1-对象类型"><a href="#1-对象类型" class="headerlink" title="1.对象类型"></a>1.对象类型</h4><p><strong>对象（Object）类型</strong> 是 C# 通用类型系统（Common Type System -  CTS）中所有数据类型的<strong>终极基类</strong>。Object 是 System.Object  类的别名。<em><strong>所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值</strong></em>。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 <strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为 <strong>拆箱</strong>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> obj;</span><br><span class="line">obj = <span class="number">100</span>; <span class="comment">// 这是装箱</span></span><br></pre></td></tr></table></figure><h4 id="2-动态（Dynamic）类型"><a href="#2-动态（Dynamic）类型" class="headerlink" title="2.动态（Dynamic）类型"></a>2.动态（Dynamic）类型</h4><p>您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。</p><p>声明动态类型的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> &lt;variable_name&gt; = <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> d = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="3-字符串（String）类型"><a href="#3-字符串（String）类型" class="headerlink" title="3.字符串（String）类型"></a>3.字符串（String）类型</h4><p><strong>字符串（String）类型</strong> 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;runoob.com&quot;</span>;</span><br></pre></td></tr></table></figure><p>一个 @引号字符串：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@&quot;runoob.com&quot;</span>;</span><br></pre></td></tr></table></figure><p>C# string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">@&quot;C:\Windows&quot;</span>;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;C:\\Windows&quot;</span>;</span><br></pre></td></tr></table></figure><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">@&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;!--</span></span><br><span class="line"><span class="string">    --&gt;</span></span><br><span class="line"><span class="string">&lt;/script&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>区别</strong>：C语言中没有字符串关键字<strong>string</strong>，只能通过数组定义字符串，如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> str[] = <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line"><span class="built_in">char</span> str[] = &#123;<span class="string">&quot;hello,world&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">char</span> str[] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="三、指针类型（Pointer-types）"><a href="#三、指针类型（Pointer-types）" class="headerlink" title="三、指针类型（Pointer types）"></a>三、指针类型（Pointer types）</h3><p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。</p><p>声明指针类型的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type* identifier;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span>* cptr;</span><br><span class="line"><span class="built_in">int</span>* iptr;</span><br></pre></td></tr></table></figure><p><strong>Tips：C#中默认是不建议指针操作的，因为C#认为这是不安全的。这相当于直接操作内存，不当的操作可能会导致内存泄漏等问题。且C#有垃圾回收机制，区别于C++，C#不需要手动释放内存，而是选择在合适的时机自动回收。</strong></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（一）——类与命名空间</title>
      <link href="/2023/01/22/Csharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB%E4%B8%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2023/01/22/Csharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB%E4%B8%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引用库文件"><a href="#一、引用库文件" class="headerlink" title="一、引用库文件"></a>一、引用库文件</h2><p><img src="/../images/Csharp%E5%BC%95%E7%94%A8%E5%BA%93%E6%96%87%E4%BB%B6.png" alt="C#引用库文件"></p><p><img src="/../images/Csharp%E5%BC%95%E7%94%A8%E5%BA%93%E6%96%87%E4%BB%B62.png"></p><ol><li>引用官方库</li></ol><ul><li><p>鼠标右击工程目录下的引用，选择添加引用，进入引用管理器界面。在右上侧搜索栏输入官方库名，确定即可把官方库添加到工程中。</p></li><li><p>在程序中使用：</p><ul><li><p>程序中使用库中的类方法全称，例如：System.Windows.Threading。</p></li><li><p>在文头引用库文件，格式为：using namespace。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows.Threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Threading thread1 = <span class="keyword">new</span> Threading()</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li>引用第三方库</li></ol><ul><li>在引用管理器界面，左侧栏选择浏览，选择本地需要引用的第三方库，可以是DLL动态库，也可以是源码.cs文件。</li><li>在程序中使用：同1</li></ul><h2 id="命名空间（namespace）"><a href="#命名空间（namespace）" class="headerlink" title="命名空间（namespace）"></a>命名空间（namespace）</h2><p>命名空间是每个库文件对外引用的接口。</p><p>引用库文件，需在程序文头添加：using namespace</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础操作（二）——类、对象、类成员简介</title>
      <link href="/2023/01/22/Csharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E7%B1%BB%E6%88%90%E5%91%98%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/01/22/Csharp%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E7%B1%BB%E6%88%90%E5%91%98%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、类"><a href="#一、类" class="headerlink" title="一、类"></a>一、类</h2><p>类是对现实世界事物进行抽象所得到的结果</p><h2 id="二、类与对象的关系"><a href="#二、类与对象的关系" class="headerlink" title="二、类与对象的关系"></a>二、类与对象的关系</h2><ul><li>对象也叫实例，是类经过“实例化”后得到的内存中的实体</li><li>依照类，我们可以创建对象，这就是“实例化”</li><li>使用new操作符创建类的实例</li><li>引用变量与实例的关系</li></ul><h2 id="三、类的三大成员"><a href="#三、类的三大成员" class="headerlink" title="三、类的三大成员"></a>三、类的三大成员</h2><ul><li>属性（Property）<ul><li>存储数据，组合起来表示类或对象当前的状态</li></ul></li><li>方法（Method）<ul><li>由C语言的函数（function）进化而来，表示类或对象“能做什么”</li><li>工作中90%的时间是在与方法打交道，因为它是“真正做事”、“构成逻辑”的成员</li></ul></li><li>事件（Event）<ul><li>类或对象通知其他类或对象的机制，为C#所特有（Java通过其他办法实现这个机制）</li><li>善用事件机制非常重要</li></ul></li><li>某些特殊类或对象在成员方面侧重点不同<ul><li>模型类或对象重在属性，如Entity Framework</li><li>工具类或对象重在方法，如Math，Console</li><li>通知类或对象重在事件，如各种Timer</li></ul></li></ul><h2 id="实例：WPF制作简易时钟"><a href="#实例：WPF制作简易时钟" class="headerlink" title="实例：WPF制作简易时钟"></a>实例：WPF制作简易时钟</h2><ol><li><p>创建WPF项目</p></li><li><p>引用线程类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows.Threading;</span><br></pre></td></tr></table></figure></li><li><p>创建定时器实例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatcherTimer timer = <span class="keyword">new</span> DispatcherTimer();</span><br></pre></td></tr></table></figure></li><li><p>引用定时器属性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer.Interval = TimeSpan.FromSeconds(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>引用定时器方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer.Tick += timer_Tick;<span class="comment">//+=在C#中表示把后面timer_Tick这个方法(函数)挂接到这个事件上，即事件每触发一次，就执行一次方法(函数)，该方法又叫事件处理器。</span></span><br></pre></td></tr></table></figure></li><li><p>事件处理器：在textbox显示实时时钟</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_Tick</span>(<span class="params"><span class="built_in">object</span> sender,EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.textbox1.Text = DateTime.Now.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动定时器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer.Start();</span><br></pre></td></tr></table></figure></li></ol><h2 id="附图"><a href="#附图" class="headerlink" title="附图"></a>附图</h2><p><img src="/../images/Csharp%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E4%BE%8B.png" alt="C#定时器实例"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo多端同步</title>
      <link href="/2023/01/21/hexo%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/"/>
      <url>/2023/01/21/hexo%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="换了电脑怎么办？"><a href="#换了电脑怎么办？" class="headerlink" title="换了电脑怎么办？"></a>换了电脑怎么办？</h2><p>我们要的是blog文件夹，你可以从一台电脑拷贝到另一台电脑，但是这似乎太麻烦了。。不现实</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1、在你的github上新建一个repository，然后把你的blog文件夹上传，进行备份，这个很简单这里不再赘述</p><p>2、在现有的heimu24.guthub.io的repository下创建一个分支来管理，具体操作步骤如下：</p><h3 id="一：建立分支hexo"><a href="#一：建立分支hexo" class="headerlink" title="一：建立分支hexo"></a>一：建立分支hexo</h3><h5 id="1、在本地D盘下（位置任意）右键Git-bash-here，执行以下指令，把heimu24-github-io项目文件克隆到本地："><a href="#1、在本地D盘下（位置任意）右键Git-bash-here，执行以下指令，把heimu24-github-io项目文件克隆到本地：" class="headerlink" title="1、在本地D盘下（位置任意）右键Git bash here，执行以下指令，把heimu24.github.io项目文件克隆到本地："></a>1、在本地D盘下（位置任意）右键Git bash here，执行以下指令，把heimu24.github.io项目文件克隆到本地：</h5><pre><code>git clone git@github.com:heimu24/heimu24.github.io.git</code></pre><h5 id="2、然后D盘下就会有个heimu24-github-io的文件夹，里面的文件就是repository上的。"><a href="#2、然后D盘下就会有个heimu24-github-io的文件夹，里面的文件就是repository上的。" class="headerlink" title="2、然后D盘下就会有个heimu24.github.io的文件夹，里面的文件就是repository上的。"></a>2、然后D盘下就会有个heimu24.github.io的文件夹，里面的文件就是repository上的。</h5><h5 id="3、进入heimu24-github-io，删除文件夹里除了-git的其他所有文件"><a href="#3、进入heimu24-github-io，删除文件夹里除了-git的其他所有文件" class="headerlink" title="3、进入heimu24.github.io，删除文件夹里除了.git的其他所有文件"></a>3、进入heimu24.github.io，删除文件夹里除了.git的其他所有文件</h5><h5 id="4、把你的blog文件夹内的所有文件全部复制到heimu24-github-io-x2F-下"><a href="#4、把你的blog文件夹内的所有文件全部复制到heimu24-github-io-x2F-下" class="headerlink" title="4、把你的blog文件夹内的所有文件全部复制到heimu24.github.io&#x2F;下"></a>4、把你的blog文件夹内的所有文件全部复制到heimu24.github.io&#x2F;下</h5><h5 id="5、里面应该有个叫-gitignore的文件，没有的话就自己创建一个，里面的内容如下："><a href="#5、里面应该有个叫-gitignore的文件，没有的话就自己创建一个，里面的内容如下：" class="headerlink" title="5、里面应该有个叫.gitignore的文件，没有的话就自己创建一个，里面的内容如下："></a>5、里面应该有个叫.gitignore的文件，没有的话就自己创建一个，里面的内容如下：</h5><p><img src="/../images/%E4%B8%8A%E4%BC%A0%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%B8%85%E5%8D%95.png" alt="这里写图片描述"></p><p>ps：.gitignore文件就是为了指定哪些文件上传的时候可以忽略，因为blog&#x2F;的文件并不全部都需要</p><h5 id="6、创建一个叫hexo（或者blog，名字随意）的分支，并切换到这个分支"><a href="#6、创建一个叫hexo（或者blog，名字随意）的分支，并切换到这个分支" class="headerlink" title="6、创建一个叫hexo（或者blog，名字随意）的分支，并切换到这个分支"></a>6、创建一个叫hexo（或者blog，名字随意）的分支，并切换到这个分支</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b</span> hexo</span><br></pre></td></tr></table></figure><p>7、添加所有文件到暂存区</p><pre><code>git add --all</code></pre><p>8、进行提交</p><pre><code>git commit -m &quot;&quot;</code></pre><p>9、推送hexo分支的文件到github仓库</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span> --<span class="keyword">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure><h2 id="发表博客"><a href="#发表博客" class="headerlink" title="发表博客"></a>发表博客</h2><h4 id="1、把你写好的博客-md文件放到D-heimu24-github-io-source-posts中，如下图"><a href="#1、把你写好的博客-md文件放到D-heimu24-github-io-source-posts中，如下图" class="headerlink" title="1、把你写好的博客.md文件放到D:\heimu24.github.io\source_posts中，如下图 "></a>1、把你写好的博客.md文件放到D:\heimu24.github.io\source_posts中，如下图 <img src="https://img-blog.csdn.net/20180725205235761?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlaW11MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></h4><h4 id="2、然后执行指令，然后就可以去网站查看效果了。-ps：如果要删除文章，直接本地删除，然后再次执行以下两句指令就行了。如果不行就先执行一下-hexo-clean，再执行下面语句-hexo-g-生成-hexo-d-部署-博客发表了，你的网站更新了（是因为heimu24-github-io的master下的文件更新了-，接下来我们备份的blog也应该要更新啊"><a href="#2、然后执行指令，然后就可以去网站查看效果了。-ps：如果要删除文章，直接本地删除，然后再次执行以下两句指令就行了。如果不行就先执行一下-hexo-clean，再执行下面语句-hexo-g-生成-hexo-d-部署-博客发表了，你的网站更新了（是因为heimu24-github-io的master下的文件更新了-，接下来我们备份的blog也应该要更新啊" class="headerlink" title="2、然后执行指令，然后就可以去网站查看效果了。 ps：如果要删除文章，直接本地删除，然后再次执行以下两句指令就行了。如果不行就先执行一下 hexo clean，再执行下面语句 hexo g #生成 hexo d #部署 博客发表了，你的网站更新了（是因为heimu24.github.io的master下的文件更新了)，接下来我们备份的blog也应该要更新啊"></a>2、然后执行指令，然后就可以去网站查看效果了。 ps：如果要删除文章，直接本地删除，然后再次执行以下两句指令就行了。如果不行就先执行一下 hexo clean，再执行下面语句 hexo g #生成 hexo d #部署 博客发表了，你的网站更新了（是因为heimu24.github.io的master下的文件更新了)，接下来我们备份的blog也应该要更新啊</h4><h2 id="今后如果换电脑的话"><a href="#今后如果换电脑的话" class="headerlink" title="今后如果换电脑的话"></a>今后如果换电脑的话</h2><p>配置好基本的环境，npm install 安装依赖，然后克隆分支到本地</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -<span class="selector-tag">b</span> hexo git@github<span class="selector-class">.com</span>:heimu24/heimu24<span class="selector-class">.github</span><span class="selector-class">.io</span>.git</span><br></pre></td></tr></table></figure><p>ps： -b就是branch分支的意思，hexo就是hexo分支，后面的地址就是你自己的repository地址<br> 至此，环境配置好了，hexo文件克隆到了本地，你就可以按照以前的步骤发博客了</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于网页播放器metingjs</title>
      <link href="/2023/01/21/%E5%85%B3%E4%BA%8E%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE%E5%99%A8metingjs/"/>
      <url>/2023/01/21/%E5%85%B3%E4%BA%8E%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE%E5%99%A8metingjs/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://github.com/metowolf/MetingJS">https://github.com/metowolf/MetingJS</a></p><p>需要安装aplayer插件：hexo-tag-aplayer</p><h3 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h3><p>1.在音乐页的index添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag"><span class="attr">server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;60198&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line"></span><br><span class="line">或者(推荐下方形式)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.chrelyonly.cf/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.chrelyonly.cf/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.chrelyonly.cn/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag">    <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;6960440256&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.如果是吸底播放器，则在主题配置文件中的inject的bottom下插入以下代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;meting-js <span class="attribute">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attribute">type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attribute">fixed</span>=<span class="string">&quot;true&quot;</span>  <span class="attribute">id</span>=<span class="string">&quot;6960440256&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="无视插件方法："><a href="#无视插件方法：" class="headerlink" title="无视插件方法："></a>无视插件方法：</h2><p>在主题配置文件的inject的bottom下插入以下代码即可：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;https://cdn.chrelyonly.cf/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="attribute">src</span>=<span class="string">&quot;https://cdn.chrelyonly.cf/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="attribute">src</span>=<span class="string">&quot;https://cdn.chrelyonly.cn/Meting.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;meting-js <span class="attribute">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attribute">type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attribute">fixed</span>=<span class="string">&quot;true&quot;</span>  <span class="attribute">id</span>=<span class="string">&quot;6960440256&quot;</span>&gt;&lt;/meting-js&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A81.jpg" alt="音乐播放器1"></p><p><img src="/../images/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A82.png" alt="音乐播放器2"></p><h2 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h2><p><img src="/../images/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A83.jpg" alt="metingjs可选项"></p>]]></content>
      
      
      
        <tags>
            
            <tag> metingjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于stc单片机远程升级的相关验证</title>
      <link href="/2023/01/17/%E5%85%B3%E4%BA%8Estc%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E7%9A%84%E7%9B%B8%E5%85%B3%E9%AA%8C%E8%AF%81/"/>
      <url>/2023/01/17/%E5%85%B3%E4%BA%8Estc%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E7%9A%84%E7%9B%B8%E5%85%B3%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="关于stc单片机远程升级的相关验证："><a href="#关于stc单片机远程升级的相关验证：" class="headerlink" title="关于stc单片机远程升级的相关验证："></a>关于stc单片机远程升级的相关验证：</h3><h5 id="猜想："><a href="#猜想：" class="headerlink" title="猜想："></a>猜想：</h5><p>1.去掉A51中的AT指向地址，只在target定义首地址，看编译后的m51文件里code地址是否发生变化。（猜想：应该不变）。</p><p>2.验证猜想：目前的bootloader因为中断偏移量是0，程序上电后，从flash的起始地址的复位中断向量入口指向bootloader的复位中断程序地址，执行复位中断程序，执行完复位中断程序后，自动跳转到main主程序。实则此时的单片机是把bootloader当成了用户AP程序（从ap程序里满足条件，则IAP_CONTR &#x3D; 0×20（而不是0×60)复位至用户程序区也可以看出）。<br>Tips：之所以不用在ap里写明函数指针跳转地址，而是直接用IAP_CONTR表示跳转，也是因为stc单片机自动把IAP_CONTR的结果对应处理到了跳转程序的启动地址。</p><p>3.验证猜想：m51文件里的code地址，前面地址是不是都对应着中断向量地址，而main地址在中断向量地址表示完的后面。可以查看对比ap和bootloader的m51文件。</p><p>4.根据网上的方法，将bootloader放在首地址，ap放在规划地址上，更改中断偏移量，看方案是否可行。</p><h5 id="回答："><a href="#回答：" class="headerlink" title="回答："></a>回答：</h5><p>1.AT只改变复位中断向量入口地址，不改变code的地址分配。所以不变。</p><p>2.中断偏移量只更改中断向量表的地址。单片机上电后，程序先找到AT中指向的复位中断向量入口地址，然后跳转到该地址执行复位中断程序。复位中断程序执行完后，跳转到main函数执行主程序。此处BootLoader没改AT，没改中断偏移量，只改了code地址分配，所以复位中断向量入口地址指向的是BootLoader的复位中断程序startup。所以此时实际上BootLoader被单片机当成了用户AP程序，通过IAP_CONTR &#x3D; 0×20（而不是0×60)即可复位到该BootLoader程序。</p><p>3.从hex文件查看可知，一般main函数执行，都是先初始化前面其他函数配置，包括中断向量的初始化。最后再跳转至main函数执行。</p><p>4.不可行。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STC8H8K64U远程升级实践（二）——KEIL配置</title>
      <link href="/2023/01/17/STC8H8K64U%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94KEIL%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/17/STC8H8K64U%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94KEIL%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、BootLoader程序KEIL环境配置"><a href="#一、BootLoader程序KEIL环境配置" class="headerlink" title="一、BootLoader程序KEIL环境配置"></a>一、BootLoader程序KEIL环境配置</h2><h5 id="1-设置程序起始地址"><a href="#1-设置程序起始地址" class="headerlink" title="1.设置程序起始地址"></a>1.设置程序起始地址</h5><p><img src="/../images/IAP%E7%A8%8B%E5%BA%8F%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80.png" alt="IAP程序起始地址"></p><h5 id="2-中断向量偏移地址（BootLoader程序无需设置）"><a href="#2-中断向量偏移地址（BootLoader程序无需设置）" class="headerlink" title="2.中断向量偏移地址（BootLoader程序无需设置）"></a>2.中断向量偏移地址（BootLoader程序无需设置）</h5><p><img src="/../images/IAP%E4%B8%AD%E6%96%AD%E5%81%8F%E7%A7%BB%E5%9C%B0%E5%9D%80.png" alt="中断向量偏移地址"></p><h5 id="3-链接器地址设置——BL51-Locate（BootLoader程序无需设置）"><a href="#3-链接器地址设置——BL51-Locate（BootLoader程序无需设置）" class="headerlink" title="3.链接器地址设置——BL51 Locate（BootLoader程序无需设置）"></a>3.链接器地址设置——BL51 Locate（BootLoader程序无需设置）</h5><p><img src="/../images/IAP%E9%93%BE%E6%8E%A5%E5%99%A8%E5%9C%B0%E5%9D%80%E8%AE%BE%E7%BD%AE.png" alt="IAP链接器地址设置"></p><h2 id="二、用户程序KEIL环境配置"><a href="#二、用户程序KEIL环境配置" class="headerlink" title="二、用户程序KEIL环境配置"></a>二、用户程序KEIL环境配置</h2><p>此处无需设置。因为用户程序在首地址。</p><p><em><strong>如果是BootLoader程序在首地址，则用户程序不仅需要修改程序起始地址，还需要修改中断偏移地址，链接器地址配置</strong></em></p><p><em><strong>但是根据实践，在keil中更改用户程序地址三要素，会产生意想不到的错误！</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STC8H8K64U远程升级实践（一）——空间分配</title>
      <link href="/2023/01/17/STC8H8K64U%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D/"/>
      <url>/2023/01/17/STC8H8K64U%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="一、空间分配"><a href="#一、空间分配" class="headerlink" title="一、空间分配"></a>一、空间分配</h2><pre><code>        -|———————————————|-  0x0000        -| |-        -| |-        -| |-        -| |-    57K-|   用户程序区   |-        -|  |-        -|  |-        -|  |-        -|  |-        -|———————————————|-  0xE3FD 3Bytes-| 用户入口跳转指令|-        -|———————————————|-  0xE400     3K-|    用户IAP区   |-        -|—————————------|-  0xEFFF        -|   |-     4K -|     系统区   |-        -|   （不可访问） |-        -|—————————------|-  0xFFFF</code></pre><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>由于stc单片机的中断地址不能发生偏移（至少我不知道怎么偏移，尝试修改启动文件.a51的ORG代码仍失败），所以用户运行程序必须在起始地址0x0000。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly基本信息</title>
      <link href="/2023/01/17/hexo-butterfly%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/"/>
      <url>/2023/01/17/hexo-butterfly%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Hexo站点信息"><a href="#一、Hexo站点信息" class="headerlink" title="一、Hexo站点信息"></a>一、Hexo站点信息</h2><h4 id="1-public文件夹"><a href="#1-public文件夹" class="headerlink" title="1.public文件夹"></a>1.public文件夹</h4><p>存放网页基本配置等信息。</p><p>hexo clean 清除public文件夹。</p><p>hexo g 生成网站静态配置等信息。</p><h4 id="2-source文件夹"><a href="#2-source文件夹" class="headerlink" title="2.source文件夹"></a>2.source文件夹</h4><p>该文件夹作为主题配置文件中的根目录&#x2F;。存放网页本地文件资源等。</p><h4 id="3-themes文件夹"><a href="#3-themes文件夹" class="headerlink" title="3.themes文件夹"></a>3.themes文件夹</h4><p>该文件夹存放主题文件。</p><h4 id="4-node-modules"><a href="#4-node-modules" class="headerlink" title="4.node_modules"></a>4.node_modules</h4><p>该文件夹一般不用备份，从github上clone到本地后，直接执行npm install命令就可以安装好所需插件</p><h4 id="5-config-yml"><a href="#5-config-yml" class="headerlink" title="5._config.yml"></a>5._config.yml</h4><p>站点配置最重要的文件！！！站点配置信息更改全在此文件！！！</p><p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容</p><h4 id="6-gitignore"><a href="#6-gitignore" class="headerlink" title="6.gitignore"></a>6.gitignore</h4><p>该文件规定哪些文件和文件夹不上传github</p><h2 id="二、Butterfly主题信息"><a href="#二、Butterfly主题信息" class="headerlink" title="二、Butterfly主题信息"></a>二、Butterfly主题信息</h2><h4 id="1-languages文件夹"><a href="#1-languages文件夹" class="headerlink" title="1.languages文件夹"></a>1.languages文件夹</h4><p>此文件夹记录英文对应中文翻译</p><h4 id="2-layout文件夹"><a href="#2-layout文件夹" class="headerlink" title="2.layout文件夹"></a>2.layout文件夹</h4><p>此文件夹存放主题布局信息</p><h4 id="3-source文件夹"><a href="#3-source文件夹" class="headerlink" title="3.source文件夹"></a>3.source文件夹</h4><p>存放主题配置本地资源</p><h4 id="4-config-yml"><a href="#4-config-yml" class="headerlink" title="4._config.yml"></a>4._config.yml</h4><p>主题配置最重要的文件！！！主题配置信息更改全在此文件！！！</p>]]></content>
      
      
      <categories>
          
          <category> hexo butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo进阶操作（一）——导航栏</title>
      <link href="/2023/01/17/Hexo%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
      <url>/2023/01/17/Hexo%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、修改导航栏显示"><a href="#一、修改导航栏显示" class="headerlink" title="一、修改导航栏显示"></a>一、修改导航栏显示</h2><p>在主题配置文件_config.yml中的menu：栏目添加自定义内容。</p><p>格式为：显示名: 路径名（&#x2F;默认为站点source文件夹） || fas fa-icon</p><p>免费图标网址：<a href="https://fontawesome.com.cn/faicons/">https://fontawesome.com.cn/faicons/</a></p><p>例子： 主页: &#x2F; || fas fa-home</p><h2 id="二、导航栏匹配新页"><a href="#二、导航栏匹配新页" class="headerlink" title="二、导航栏匹配新页"></a>二、导航栏匹配新页</h2><p>实现点击导航栏显示新内容页：</p><p>Blog根目录鼠标右击，选择git bash here。输入以下命令：  </p><p><code>hexo new page 导航栏名</code></p><p>则会在站点source文件夹下创建一个以导航栏名为文件夹名字的文件夹。</p><p>该文件夹默认生成一个index.md文件，该文件front-master标识该导航栏新页的基本信息。</p><p>在index.md文件中，增加内容&#x2F;操作，则可以在导航栏新页中显示内容&#x2F;操作。</p><h2 id="三、导航栏展开显示"><a href="#三、导航栏展开显示" class="headerlink" title="三、导航栏展开显示"></a>三、导航栏展开显示</h2><p>menu:中修改配置，格式如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">目录||fas fa-bars:</span><br><span class="line">   归档: <span class="regexp">/archives/</span> || fas fa-archive</span><br><span class="line">   标签: <span class="regexp">/tags/</span> || fas fa-tags</span><br><span class="line">   分类: <span class="regexp">/categories/</span> || fas fa-folder-open</span><br></pre></td></tr></table></figure><h2 id="四、导航栏新页下载文件"><a href="#四、导航栏新页下载文件" class="headerlink" title="四、导航栏新页下载文件"></a>四、导航栏新页下载文件</h2><p>在导航栏文件夹下放置本地文件，在该文件夹下index.md中输入如下markdown代码：</p><p><code>[链接显示名](本地文件 &quot;预览名&quot;)</code></p><p>例子：</p><p><code>[测试文件](test.pdf &quot;这是pdf测试文件&quot;)</code></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见错误</title>
      <link href="/2023/01/17/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2023/01/17/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="一、GitHub文件夹有白色箭头无法打开"><a href="#一、GitHub文件夹有白色箭头无法打开" class="headerlink" title="一、GitHub文件夹有白色箭头无法打开"></a>一、GitHub文件夹有白色箭头无法打开</h3><p>1.删除文件夹里面的.git文件夹</p><p>2.执行git rm –cached 该文件夹路径</p><p>3.执行git add .</p><p>4.执行git commit -m “”</p><p>5.执行git push origin [branch_name]</p><h3 id="二、完美解决-fatal-unable-to-access-‘https-github-com-…-git’-Could-not-resolve-host-github-com"><a href="#二、完美解决-fatal-unable-to-access-‘https-github-com-…-git’-Could-not-resolve-host-github-com" class="headerlink" title="二、完美解决 fatal: unable to access ‘https://github.com/…/.git’: Could not resolve host: github.com"></a>二、完美解决 fatal: unable to access ‘<a href="https://github.com/%E2%80%A6/.git%E2%80%99">https://github.com/…/.git’</a>: Could not resolve host: github.com</h3><pre><code>git config --global --unset http.proxy git config --global --unset https.proxy</code></pre><h3 id="三、windows使用git时出现：warning-LF-will-be-replaced-by-CRLF"><a href="#三、windows使用git时出现：warning-LF-will-be-replaced-by-CRLF" class="headerlink" title="三、windows使用git时出现：warning: LF will be replaced by CRLF"></a>三、windows使用git时出现：warning: LF will be replaced by CRLF</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>$ rm -rf .git  // 删除.git</span><br><span class="line"><span class="symbol">2 </span></span><br><span class="line"><span class="symbol">3 </span>$ git config --global core.autocrlf false  //禁用自动转换 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机远程升级（三）——升级步骤</title>
      <link href="/2023/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%8D%87%E7%BA%A7%E6%AD%A5%E9%AA%A4/"/>
      <url>/2023/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%8D%87%E7%BA%A7%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、程序远程升级的步骤"><a href="#一、程序远程升级的步骤" class="headerlink" title="一、程序远程升级的步骤"></a>一、程序远程升级的步骤</h2><p>1.上位机发送升级请求指令。</p><p>2.下位机回复收到请求升级指令。</p><p>3.上位机发送程序升级数据（一般包含包头、包号、总包数、分包的程序数据、校验）。</p><p>4.单片机收到程序数据后，确认校验无误，存储到程序缓存区，并按包号回复上位机，防止出现传输包错乱。</p><p>5.单片机收到回复后再发送下一包数据，直至结束。</p><p>6.程序数据发送完成后，单片机发送升级结束指令。</p><p>7.单片机收到结束指令后，回复上位机。并在Flash指令位置写入升级标志，重启进入BOOT程序。</p><p>8.BOOT陈旭读取升级标志，若需要升级，则读取程序缓存区数据，写入到Flash中。</p><p>9.升级完毕，跳转到Flash指定地址运行。</p><h2 id="二、内存分配"><a href="#二、内存分配" class="headerlink" title="二、内存分配"></a>二、内存分配</h2><p>开发BootLoader前，首先需要规划MCU的ROM分区，给BOOT和APP预留足够的空间，避免BootLoader程序编译后的固件大小超出所属空间，从而影响用户程序（APP）区，常用的内存分配图</p><p>如下：</p><table><thead><tr><th align="center">MCU分区</th><th align="center">内容描述</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">BootLoader</td><td align="center">中断向量表<br />Boot可执行程序</td><td align="center"></td></tr><tr><td align="center">用户程序区（APP）</td><td align="center">重定向的中断向量表<br />APP可执行程序</td><td align="center">需要软件配置</td></tr><tr><td align="center">数据储存区</td><td align="center">系统需要下点保存的数据</td><td align="center">可选择划分该区域</td></tr></tbody></table><h2 id="三、程序跳转"><a href="#三、程序跳转" class="headerlink" title="三、程序跳转"></a>三、程序跳转</h2><p>在MCU升级完成或者是在一定时间内未收到升级请求，那么就需要验证APP程序是否有效（比如擦除后烧写失败则APP程序不完整，在APP执行中会出错），才能进行跳转。</p><h4 id="验证原因："><a href="#验证原因：" class="headerlink" title="验证原因："></a>验证原因：</h4><ul><li>BOOT和APP属于单独工程，若一新的MCU先烧录BOOT程序，则上电后无APP程序，则会引起MCU异常中断。</li><li>APP程序擦除后烧写失败则导致APP程序不完整，跳转后也会引起MCU异常中断。</li><li>APP程序存在但代码数据因为不可抗因素出现错乱，跳转后也会引起MCU异常中断或者用户程序功能异常等。</li></ul><h4 id="如何验证？"><a href="#如何验证？" class="headerlink" title="如何验证？"></a>如何验证？</h4><ul><li>验证APP程序是否存在且完整，通常做法是在指定的APP程序区设置一标志位，表示APP程序存在（擦除时该标志也会一并擦除）</li><li>对APP程序进行校验，防止APP程序存在但因为不可抗因素出现代码错乱的问题。</li></ul><h4 id="验证结束"><a href="#验证结束" class="headerlink" title="验证结束"></a>验证结束</h4><ul><li>在验证结束后，若验证成果，则准备跳转APP程序，在跳转之前需要BOOT关闭相关功能，防止跳转时或者跳转后出错。</li><li>跳转至APP后，需要进行重定向中断向量表，否则无法正常进入APP程序区的中断执行函数，具体原因可先了解中断向量表的含义及作用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机远程升级（二）——设计思路</title>
      <link href="/2023/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/"/>
      <url>/2023/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="一-将Flash区域划分为四大区域："><a href="#一-将Flash区域划分为四大区域：" class="headerlink" title="一.将Flash区域划分为四大区域："></a>一.将Flash区域划分为四大区域：</h3><p>​①第一块区域用来存放BootLoader程序。</p><p>​②第二块与第三块区域可以每个分“x”KBytes大小用来存放用户应用程序——（APP1）与用户应用程序二（APP2）。</p><p>​③第四部分用来存放各种标志位，比如程序标志，应用程序版本标志等等。</p><h3 id="二-空间分布示意图"><a href="#二-空间分布示意图" class="headerlink" title="二.空间分布示意图"></a>二.空间分布示意图</h3><p><code>________________________</code></p><p>|BootLoader程序区|</p><p>||</p><p>|<code>______________________</code>|</p><p>||</p><p>|用户AP1     |</p><p>||</p><p>|<code>______________________</code>|</p><p>||</p><p>|用户AP2 |</p><p>||</p><p>|<code>______________________</code>|</p><p>|需要存放在CODE区的参数  |</p><p>|<code>______________________</code>|</p><h3 id="三-逻辑示意图"><a href="#三-逻辑示意图" class="headerlink" title="三.逻辑示意图"></a>三.逻辑示意图</h3><p><img src="/..%5Cimages%5C%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="单片机远程升级示意图"></p><h3 id="四-设计程序缓存区"><a href="#四-设计程序缓存区" class="headerlink" title="四.设计程序缓存区"></a>四.设计程序缓存区</h3><p>在内部或外部存储器开辟一块区域，用于存储分包接收到的程序数据。等到全部数据接收完毕后再一次性写入到Flash进行升级。这样做有以下2点好处：</p><p>1.直接升级时间可能会比较长，影响用户正常使用，增加缓存区设计可以大大减少升级时间。</p><p>2.直接升级时，如果网络出现问题，可能导致设备无法正常启动变砖。增加缓存区设计后，即使升级数据传输失败，也不影响设备的正常使用。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机远程升级（一）——烧录程序三种方式</title>
      <link href="/2023/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E7%83%A7%E5%BD%95%E7%A8%8B%E5%BA%8F%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/16/%E5%8D%95%E7%89%87%E6%9C%BA%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E7%83%A7%E5%BD%95%E7%A8%8B%E5%BA%8F%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一-烧录程序三种方式"><a href="#一-烧录程序三种方式" class="headerlink" title="一.烧录程序三种方式"></a>一.烧录程序三种方式</h2><p>1.ISP：在系统中编程。出厂时ST公司已经在ROM中写入了BootLoader，通过通信接口就可以擦除与编程用户程序。</p><p>2.IAP：在应用程序中编程。用户在运行程序的时候，通过BootLoader程序对指定的Flash区域进行烧录。用户可以自己写入一个BootLoader程序来运行存储在Flash中指定区域的程序，在程序的运行过程中我们就可以通过任何通讯方式，把接收到的bin程序写入到指定区域的Flash中，然后进行应用程序的升级。</p><p>3.ICP：在电路编程。这是一种串行编程方式，可以使用JTAG或SWD接口来对STM32进行程序烧写。</p><h2 id="二-BootLoader"><a href="#二-BootLoader" class="headerlink" title="二.BootLoader"></a>二.BootLoader</h2><p>BootLoader是一段引导程序，当单片机上电&#x2F;复位后在用户程序之前先运行。它判断当前是否需要进入升级状态。如果不需要升级，就直接运行Flash中原有的程序；如果需要升级，首先擦除旧的程序，然后从通信媒介中接收用户程序，同时写入Flash中。</p><h4 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h4><p>单片机在刚上电的最初极短时间内，先进入BootLoader程序，检测有无升级程序命令。如果有，则升级用户程序，升级完成后自动跳入用户程序区；如果没有，则直接跳入用户程序区。如果单片机正常运行用户程序过程中，当收到预先设置的升级跳转指令时，即结束当前任务，自动复位转入BootLoader程序；当BootLoader程序检验到升级程序命令时即可进行升级，升级结束自动转入用户程序区。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git指令手册</title>
      <link href="/2023/01/15/git%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
      <url>/2023/01/15/git%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png" alt="git基本操作"></p><h3 id="一个简单的操作步骤"><a href="#一个简单的操作步骤" class="headerlink" title="一个简单的操作步骤"></a>一个简单的操作步骤</h3><pre><code>git init    git add .   git commit</code></pre><ul><li>git init    -初始化仓库。</li><li>git add .   -添加文件到暂存区。</li><li>git commit  -将暂存区内容添加到仓库中。</li></ul><h3 id="创建仓库命令"><a href="#创建仓库命令" class="headerlink" title="创建仓库命令"></a>创建仓库命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git init</td><td>初始化仓库</td></tr><tr><td>git clone</td><td>拷贝一份远程仓库，也就是下载一个项目</td></tr></tbody></table><h3 id="提交与修改"><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git add</td><td>添加文件到暂存区</td></tr><tr><td>git status</td><td>查看仓库当前的状态，显示有变更的文件</td></tr><tr><td>git commit</td><td>提交暂存区到本地仓库</td></tr><tr><td>git rm</td><td>将文件从暂存区和工作区中删除</td></tr></tbody></table><h3 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git log</td><td>查看历史提交记录</td></tr><tr><td>git blame <file></td><td>以列表形式查看指定文件的历史修改记录</td></tr></tbody></table><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git remote</td><td>远程仓库操作</td></tr><tr><td>git fetch</td><td>从远程获取代码库</td></tr><tr><td>git pull</td><td>下载远程代码并合并</td></tr><tr><td>git push</td><td>上传远程代码并合并</td></tr></tbody></table><h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><pre><code>git checkout -b 分支名</code></pre><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><pre><code>git branch //查看本地分支git branch -a//查看本地和远程分支</code></pre><h1 id="一次完整的操作"><a href="#一次完整的操作" class="headerlink" title="一次完整的操作"></a>一次完整的操作</h1><pre><code>git add .git commit -m &lt;comments&gt;git push origin branch</code></pre><p>&lt;comments&gt; 为注释，如注释字符串中间没有空格，则不加任何符号。如中间有空格，则加双引号括起来。</p><p>origin：远程仓库<br>branch：为需要提交的分支</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法手册</title>
      <link href="/2023/01/15/MarkDown%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/"/>
      <url>/2023/01/15/MarkDown%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><p>标题前用#修饰，几个#就是几级标题，注意#和标题之间加空格  </p><h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><p>每个段落间用空白行分割   </p><h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><p>在一行的末尾添加两个以上的空格，然后按回车键，即可换行，或者末尾加换行符（<code>&lt;br&gt;</code>）</p><h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><p>1.加粗文本：在单词前后各添加两个星号<code>**</code>或者下划线<code>__</code>。<br>2.斜体：在单词前后各添加一个星号<code>*</code>或者下划线<code>_</code>。<br>3.同时加粗和斜体：在单词前后各添加三个星号<code>***</code>或者下划线<code>___</code>。</p><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><p>1.要创建块引用，请在段落前添加一个<code>&gt;</code> 符号。<br>2.多个段落的块引用：块引用可以包含多个段落。为段落之间的空白行添加一个 <code>&gt;</code> 符号。<br>3.嵌套块引用：块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。<br>4.带有其它元素的块引用：块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。   </p><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><p>1.有序列表：每个列表项前添加数字并紧跟一个英文句点。<br>2.无序列表：每个列表项前面添加破折号（-），星号（*）或加号（+）。缩进一个或多个列表项可创建嵌套列表。<br>3.在列表中嵌套其他元素：要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符。   </p><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><p>1.基本语法：要将单词或短语表示为代码，将其包裹在反引号（&#96;）中。</p><p>2.围栏代码块：Markdown基本语法允许您通过将行缩进四个空格或一个制表符来创建代码块。如果发现不方便，请尝试使用受保护的代码块。根据Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号（(&#96;&#96;&#96;）或三个波浪号（~~~）。   </p><h2 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。  </p><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>1.链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code><br>2.网址和Email地址：使用尖括号可以很方便地把URL或者email地址变成可点击的链接。  </p><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>1.要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。<br>2.链接图片：给图片增加链接，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。<br><code>[![沙漠中的岩石图片](/assets/img/shiprock.jpg &quot;Shiprock&quot;)](https://markdown.com.cn)</code></p><h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。<br><code>\* Without the backslash, this would be a bullet in an unordered list.</code></p><h2 id="表格语法"><a href="#表格语法" class="headerlink" title="表格语法"></a>表格语法</h2><p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。  </p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="下载语法"><a href="#下载语法" class="headerlink" title="下载语法"></a>下载语法</h2><p><code>[下载显示名](下载文件 &quot;文件预览名&quot;)</code></p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo指令手册</title>
      <link href="/2023/01/15/hexo%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
      <url>/2023/01/15/hexo%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="新建一个网站"><a href="#新建一个网站" class="headerlink" title="新建一个网站"></a>新建一个网站</h3><pre><code>hexo init [folder]</code></pre><p>如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>如果没有设置 layout 的话，默认使用_config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre><code>hexo n &quot;学习笔记  六&quot;</code></pre><p>新建一篇标题为 <em><strong>学习笔记 六</strong></em> 的文章，因为标题里有空格，所以加上了引号。<br>文章标题可以在对应 md 文件里改，新建时标题可以写的简些；<br>hexo n 是 hexo new 的缩写，命令效果一致。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-p,–path</td><td>自定义新文章的路径</td></tr><tr><td>-r,–replace</td><td>如果存在同名文章，将其替换</td></tr><tr><td>-s,–slug</td><td>文章的Slug,作为新文章的文件名和发布后的URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：    </p><pre><code>hexo new page --path about/me &quot;About me&quot;</code></pre><p>以上命令会创建一个 source&#x2F;about&#x2F;me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre><code>hexo new page --path about/me</code></pre><p>此时 Hexo 会创建 source&#x2F;_posts&#x2F;about&#x2F;me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre><code>hexo generate</code></pre><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><pre><code>hexo deploy</code></pre><p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p><h3 id="清除缓存文件-db-json-和已生成的静态文件-public"><a href="#清除缓存文件-db-json-和已生成的静态文件-public" class="headerlink" title="清除缓存文件 (db.json) 和已生成的静态文件 (public)"></a>清除缓存文件 (db.json) 和已生成的静态文件 (public)</h3><pre><code>hexo clean</code></pre><h3 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h3><pre><code>hexo list &lt;type&gt;</code></pre><h3 id="显示hexo版本"><a href="#显示hexo版本" class="headerlink" title="显示hexo版本"></a>显示hexo版本</h3><pre><code>hexo version</code></pre><h3 id="启动本地服务器，用于预览主题。"><a href="#启动本地服务器，用于预览主题。" class="headerlink" title="启动本地服务器，用于预览主题。"></a>启动本地服务器，用于预览主题。</h3><pre><code>hexo server</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
